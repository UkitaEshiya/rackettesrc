// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Read$Rackette = require("./Read.bs.js");
var CS17SetupRackette$Rackette = require("./CS17SetupRackette.bs.js");

function plus(numlst) {
  if (!numlst) {
    return Pervasives.failwith("invalid input addition");
  }
  var x = numlst.hd;
  if (x.TAG !== /* NumV */0) {
    return Pervasives.failwith("invalid input addition");
  }
  var match = numlst.tl;
  if (!match) {
    return Pervasives.failwith("invalid input addition");
  }
  var y = match.hd;
  if (y.TAG === /* NumV */0 && !match.tl) {
    return {
            TAG: /* NumV */0,
            _0: x._0 + y._0 | 0
          };
  } else {
    return Pervasives.failwith("invalid input addition");
  }
}

function subtraction(numlst) {
  if (!numlst) {
    return Pervasives.failwith("invalid input subtraction");
  }
  var x = numlst.hd;
  if (x.TAG !== /* NumV */0) {
    return Pervasives.failwith("invalid input subtraction");
  }
  var match = numlst.tl;
  if (!match) {
    return Pervasives.failwith("invalid input subtraction");
  }
  var y = match.hd;
  if (y.TAG === /* NumV */0 && !match.tl) {
    return {
            TAG: /* NumV */0,
            _0: x._0 - y._0 | 0
          };
  } else {
    return Pervasives.failwith("invalid input subtraction");
  }
}

function multiplication(numlst) {
  if (!numlst) {
    return Pervasives.failwith("invalid input multiplication");
  }
  var x = numlst.hd;
  if (x.TAG !== /* NumV */0) {
    return Pervasives.failwith("invalid input multiplication");
  }
  var match = numlst.tl;
  if (!match) {
    return Pervasives.failwith("invalid input multiplication");
  }
  var y = match.hd;
  if (y.TAG === /* NumV */0 && !match.tl) {
    return {
            TAG: /* NumV */0,
            _0: Math.imul(x._0, y._0)
          };
  } else {
    return Pervasives.failwith("invalid input multiplication");
  }
}

function division(numlst) {
  if (!numlst) {
    return Pervasives.failwith("invalid input division");
  }
  var x = numlst.hd;
  if (x.TAG !== /* NumV */0) {
    return Pervasives.failwith("invalid input division");
  }
  var match = numlst.tl;
  if (!match) {
    return Pervasives.failwith("invalid input division");
  }
  var y = match.hd;
  if (y.TAG === /* NumV */0 && !match.tl) {
    return {
            TAG: /* NumV */0,
            _0: Caml_int32.div(x._0, y._0)
          };
  } else {
    return Pervasives.failwith("invalid input division");
  }
}

function remi(numlst) {
  if (!numlst) {
    return Pervasives.failwith("invalid input remainder");
  }
  var x = numlst.hd;
  if (x.TAG !== /* NumV */0) {
    return Pervasives.failwith("invalid input remainder");
  }
  var match = numlst.tl;
  if (!match) {
    return Pervasives.failwith("invalid input remainder");
  }
  var y = match.hd;
  if (y.TAG === /* NumV */0 && !match.tl) {
    return {
            TAG: /* NumV */0,
            _0: Caml_int32.mod_(x._0, y._0)
          };
  } else {
    return Pervasives.failwith("invalid input remainder");
  }
}

function eq(numlst) {
  if (!numlst) {
    return Pervasives.failwith("invalid input num equal");
  }
  var x = numlst.hd;
  if (x.TAG !== /* NumV */0) {
    return Pervasives.failwith("invalid input num equal");
  }
  var match = numlst.tl;
  if (!match) {
    return Pervasives.failwith("invalid input num equal");
  }
  var y = match.hd;
  if (y.TAG === /* NumV */0 && !match.tl) {
    return {
            TAG: /* BoolV */1,
            _0: x._0 === y._0
          };
  } else {
    return Pervasives.failwith("invalid input num equal");
  }
}

function great(numlst) {
  if (!numlst) {
    return Pervasives.failwith("invalid input greater than");
  }
  var x = numlst.hd;
  if (x.TAG !== /* NumV */0) {
    return Pervasives.failwith("invalid input greater than");
  }
  var match = numlst.tl;
  if (!match) {
    return Pervasives.failwith("invalid input greater than");
  }
  var y = match.hd;
  if (y.TAG === /* NumV */0 && !match.tl) {
    return {
            TAG: /* BoolV */1,
            _0: x._0 > y._0
          };
  } else {
    return Pervasives.failwith("invalid input greater than");
  }
}

function small(numlst) {
  if (!numlst) {
    return Pervasives.failwith("invalid input less than");
  }
  var x = numlst.hd;
  if (x.TAG !== /* NumV */0) {
    return Pervasives.failwith("invalid input less than");
  }
  var match = numlst.tl;
  if (!match) {
    return Pervasives.failwith("invalid input less than");
  }
  var y = match.hd;
  if (y.TAG === /* NumV */0 && !match.tl) {
    return {
            TAG: /* BoolV */1,
            _0: x._0 < y._0
          };
  } else {
    return Pervasives.failwith("invalid input less than");
  }
}

function greq(numlst) {
  if (!numlst) {
    return Pervasives.failwith("invalid input greater than or equal to");
  }
  var x = numlst.hd;
  if (x.TAG !== /* NumV */0) {
    return Pervasives.failwith("invalid input greater than or equal to");
  }
  var match = numlst.tl;
  if (!match) {
    return Pervasives.failwith("invalid input greater than or equal to");
  }
  var y = match.hd;
  if (y.TAG === /* NumV */0 && !match.tl) {
    return {
            TAG: /* BoolV */1,
            _0: x._0 >= y._0
          };
  } else {
    return Pervasives.failwith("invalid input greater than or equal to");
  }
}

function smeq(numlst) {
  if (!numlst) {
    return Pervasives.failwith("invalid input less than or equal to");
  }
  var x = numlst.hd;
  if (x.TAG !== /* NumV */0) {
    return Pervasives.failwith("invalid input less than or equal to");
  }
  var match = numlst.tl;
  if (!match) {
    return Pervasives.failwith("invalid input less than or equal to");
  }
  var y = match.hd;
  if (y.TAG === /* NumV */0 && !match.tl) {
    return {
            TAG: /* BoolV */1,
            _0: x._0 <= y._0
          };
  } else {
    return Pervasives.failwith("invalid input less than or equal to");
  }
}

function equality(alst) {
  if (!alst) {
    return Pervasives.failwith("invalid input equality");
  }
  var x = alst.hd;
  switch (x.TAG | 0) {
    case /* NumV */0 :
        var match = alst.tl;
        if (!match) {
          return Pervasives.failwith("invalid input equality");
        }
        var y = match.hd;
        if (y.TAG === /* NumV */0) {
          if (match.tl) {
            return Pervasives.failwith("invalid input equality");
          } else {
            return {
                    TAG: /* BoolV */1,
                    _0: x._0 === y._0
                  };
          }
        }
        break;
    case /* BoolV */1 :
        var match$1 = alst.tl;
        if (!match$1) {
          return Pervasives.failwith("invalid input equality");
        }
        var y$1 = match$1.hd;
        if (y$1.TAG === /* BoolV */1) {
          if (match$1.tl) {
            return Pervasives.failwith("invalid input equality");
          } else {
            return {
                    TAG: /* BoolV */1,
                    _0: x._0 === y$1._0
                  };
          }
        }
        break;
    case /* ListV */2 :
        var match$2 = alst.tl;
        if (!match$2) {
          return Pervasives.failwith("invalid input equality");
        }
        var y$2 = match$2.hd;
        if (y$2.TAG === /* ListV */2) {
          if (match$2.tl) {
            return Pervasives.failwith("invalid input equality");
          } else {
            return {
                    TAG: /* BoolV */1,
                    _0: x._0 === y$2._0
                  };
          }
        }
        break;
    case /* BuiltinV */3 :
    case /* ClosureV */4 :
        break;
    
  }
  var match$3 = alst.tl;
  if (match$3 && !match$3.tl) {
    return {
            TAG: /* BoolV */1,
            _0: false
          };
  } else {
    return Pervasives.failwith("invalid input equality");
  }
}

function isNum(lst) {
  if (lst) {
    if (lst.hd.TAG === /* NumV */0) {
      if (lst.tl) {
        if (lst.tl) {
          return Pervasives.failwith("invalid input isnum must be one argument");
        } else {
          return {
                  TAG: /* BoolV */1,
                  _0: false
                };
        }
      } else {
        return {
                TAG: /* BoolV */1,
                _0: true
              };
      }
    } else if (lst.tl) {
      return Pervasives.failwith("invalid input isnum must be one argument");
    } else {
      return {
              TAG: /* BoolV */1,
              _0: false
            };
    }
  } else {
    return Pervasives.failwith("invalid input isnum cannot be empty");
  }
}

function isZero(lst) {
  if (!lst) {
    return Pervasives.failwith("invalid input is input zero, must be one argument num");
  }
  var match = lst.hd;
  if (match.TAG === /* NumV */0) {
    if (match._0 !== 0) {
      if (lst.tl) {
        return Pervasives.failwith("invalid input is input zero, must be one argument num");
      } else {
        return {
                TAG: /* BoolV */1,
                _0: false
              };
      }
    } else if (lst.tl) {
      return Pervasives.failwith("invalid input is input zero, must be one argument num");
    } else {
      return {
              TAG: /* BoolV */1,
              _0: true
            };
    }
  } else {
    return Pervasives.failwith("invalid input is input zero, must be one argument num");
  }
}

function contain(lst) {
  if (!lst) {
    return Pervasives.failwith("invalid input expect two arguments");
  }
  var match = lst.tl;
  var hd = lst.hd;
  if (!match) {
    return Pervasives.failwith("invalid input expect two arguments");
  }
  var match$1 = match.hd;
  if (match$1.TAG !== /* ListV */2) {
    if (match.tl) {
      return Pervasives.failwith("invalid input expect two arguments");
    } else {
      return Pervasives.failwith("invalid input second item must be list");
    }
  }
  var match$2 = match$1._0;
  if (match$2) {
    if (match.tl) {
      return Pervasives.failwith("invalid input expect two arguments");
    } else {
      return {
              TAG: /* ListV */2,
              _0: {
                hd: hd,
                tl: {
                  hd: match$2.hd,
                  tl: match$2.tl
                }
              }
            };
    }
  } else if (match.tl) {
    return Pervasives.failwith("invalid input expect two arguments");
  } else {
    return {
            TAG: /* ListV */2,
            _0: {
              hd: hd,
              tl: /* [] */0
            }
          };
  }
}

function firstLst(lst) {
  if (!lst) {
    return Pervasives.failwith("invalid input first cannot be empty list");
  }
  var match = lst.hd;
  if (match.TAG !== /* ListV */2) {
    return Pervasives.failwith("invalid input input must be a list");
  }
  var match$1 = match._0;
  if (match$1 && !lst.tl) {
    return match$1.hd;
  } else {
    return Pervasives.failwith("invalid input input must be a list");
  }
}

function restLst(lst) {
  if (!lst) {
    return Pervasives.failwith("invalid input first cannot be empty list");
  }
  var match = lst.hd;
  if (match.TAG !== /* ListV */2) {
    return Pervasives.failwith("invalid input input must be a list");
  }
  var match$1 = match._0;
  if (match$1 && !lst.tl) {
    return {
            TAG: /* ListV */2,
            _0: match$1.tl
          };
  } else {
    return Pervasives.failwith("invalid input input must be a list");
  }
}

function isEmpty(lst) {
  if (!lst) {
    return Pervasives.failwith("invalid input input must be a list");
  }
  var match = lst.hd;
  if (match.TAG === /* ListV */2) {
    if (match._0) {
      if (lst.tl) {
        return Pervasives.failwith("invalid input input must be a list");
      } else {
        return {
                TAG: /* BoolV */1,
                _0: false
              };
      }
    } else if (lst.tl) {
      return Pervasives.failwith("invalid input input must be a list");
    } else {
      return {
              TAG: /* BoolV */1,
              _0: true
            };
    }
  } else {
    return Pervasives.failwith("invalid input input must be a list");
  }
}

function isCons(lst) {
  if (!lst) {
    return Pervasives.failwith("invalid input input must be a list");
  }
  var match = lst.hd;
  if (match.TAG === /* ListV */2) {
    if (match._0) {
      if (lst.tl) {
        return Pervasives.failwith("invalid input input must be a list");
      } else {
        return {
                TAG: /* BoolV */1,
                _0: true
              };
      }
    } else if (lst.tl) {
      return Pervasives.failwith("invalid input input must be a list");
    } else {
      return {
              TAG: /* BoolV */1,
              _0: false
            };
    }
  } else {
    return Pervasives.failwith("invalid input input must be a list");
  }
}

function isNot(lst) {
  if (!lst) {
    return Pervasives.failwith("invalid input input must be a boolean");
  }
  var match = lst.hd;
  if (match.TAG === /* BoolV */1) {
    if (match._0) {
      if (lst.tl) {
        return Pervasives.failwith("invalid input input must be a boolean");
      } else {
        return {
                TAG: /* BoolV */1,
                _0: false
              };
      }
    } else if (lst.tl) {
      return Pervasives.failwith("invalid input input must be a boolean");
    } else {
      return {
              TAG: /* BoolV */1,
              _0: true
            };
    }
  } else {
    return Pervasives.failwith("invalid input input must be a boolean");
  }
}

var initialTle_0 = [
  /* Name */{
    _0: "+"
  },
  {
    TAG: /* BuiltinV */3,
    _0: {
      printedRep: "<builtin-proc-+>",
      bProc: plus
    }
  }
];

var initialTle_1 = {
  hd: [
    /* Name */{
      _0: "-"
    },
    {
      TAG: /* BuiltinV */3,
      _0: {
        printedRep: "<builtin-proc-->",
        bProc: subtraction
      }
    }
  ],
  tl: {
    hd: [
      /* Name */{
        _0: "*"
      },
      {
        TAG: /* BuiltinV */3,
        _0: {
          printedRep: "<builtin-proc-*>",
          bProc: multiplication
        }
      }
    ],
    tl: {
      hd: [
        /* Name */{
          _0: "/"
        },
        {
          TAG: /* BuiltinV */3,
          _0: {
            printedRep: "<builtin-proc-/>",
            bProc: division
          }
        }
      ],
      tl: {
        hd: [
          /* Name */{
            _0: "remainder"
          },
          {
            TAG: /* BuiltinV */3,
            _0: {
              printedRep: "<builtin-proc-rem>",
              bProc: remi
            }
          }
        ],
        tl: {
          hd: [
            /* Name */{
              _0: "="
            },
            {
              TAG: /* BuiltinV */3,
              _0: {
                printedRep: "<builtin-proc-=>",
                bProc: eq
              }
            }
          ],
          tl: {
            hd: [
              /* Name */{
                _0: ">"
              },
              {
                TAG: /* BuiltinV */3,
                _0: {
                  printedRep: "<builtin-proc->>",
                  bProc: great
                }
              }
            ],
            tl: {
              hd: [
                /* Name */{
                  _0: "<"
                },
                {
                  TAG: /* BuiltinV */3,
                  _0: {
                    printedRep: "<builtin-proc-<>",
                    bProc: small
                  }
                }
              ],
              tl: {
                hd: [
                  /* Name */{
                    _0: "<="
                  },
                  {
                    TAG: /* BuiltinV */3,
                    _0: {
                      printedRep: "<builtin-proc-<=>",
                      bProc: greq
                    }
                  }
                ],
                tl: {
                  hd: [
                    /* Name */{
                      _0: ">="
                    },
                    {
                      TAG: /* BuiltinV */3,
                      _0: {
                        printedRep: "<builtin-proc->=>",
                        bProc: smeq
                      }
                    }
                  ],
                  tl: {
                    hd: [
                      /* Name */{
                        _0: "equal?"
                      },
                      {
                        TAG: /* BuiltinV */3,
                        _0: {
                          printedRep: "<builtin-proc-equal?>",
                          bProc: equality
                        }
                      }
                    ],
                    tl: {
                      hd: [
                        /* Name */{
                          _0: "number?"
                        },
                        {
                          TAG: /* BuiltinV */3,
                          _0: {
                            printedRep: "<builtin-proc-number?>",
                            bProc: isNum
                          }
                        }
                      ],
                      tl: {
                        hd: [
                          /* Name */{
                            _0: "zero?"
                          },
                          {
                            TAG: /* BuiltinV */3,
                            _0: {
                              printedRep: "<builtin-proc-zero?>",
                              bProc: isZero
                            }
                          }
                        ],
                        tl: {
                          hd: [
                            /* Name */{
                              _0: "cons"
                            },
                            {
                              TAG: /* BuiltinV */3,
                              _0: {
                                printedRep: "<builtin-proc-cons>",
                                bProc: contain
                              }
                            }
                          ],
                          tl: {
                            hd: [
                              /* Name */{
                                _0: "first"
                              },
                              {
                                TAG: /* BuiltinV */3,
                                _0: {
                                  printedRep: "<builtin-proc-first>",
                                  bProc: firstLst
                                }
                              }
                            ],
                            tl: {
                              hd: [
                                /* Name */{
                                  _0: "rest"
                                },
                                {
                                  TAG: /* BuiltinV */3,
                                  _0: {
                                    printedRep: "<builtin-proc-rest>",
                                    bProc: restLst
                                  }
                                }
                              ],
                              tl: {
                                hd: [
                                  /* Name */{
                                    _0: "empty?"
                                  },
                                  {
                                    TAG: /* BuiltinV */3,
                                    _0: {
                                      printedRep: "<builtin-proc-empty?>",
                                      bProc: isEmpty
                                    }
                                  }
                                ],
                                tl: {
                                  hd: [
                                    /* Name */{
                                      _0: "cons?"
                                    },
                                    {
                                      TAG: /* BuiltinV */3,
                                      _0: {
                                        printedRep: "<builtin-proc-cons?>",
                                        bProc: isCons
                                      }
                                    }
                                  ],
                                  tl: {
                                    hd: [
                                      /* Name */{
                                        _0: "not"
                                      },
                                      {
                                        TAG: /* BuiltinV */3,
                                        _0: {
                                          printedRep: "<builtin-proc-not>",
                                          bProc: isNot
                                        }
                                      }
                                    ],
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};

var initialTle = {
  hd: initialTle_0,
  tl: initialTle_1
};

function lambdaHelp(listC) {
  switch (listC.TAG | 0) {
    case /* NumberC */0 :
    case /* SymbolC */1 :
        return Pervasives.failwith("invalid input lambdaHelp");
    case /* ListC */2 :
        var match = listC._0;
        if (!match) {
          return Pervasives.failwith("invalid input lambdaHelp");
        }
        var x = match.hd;
        switch (x.TAG | 0) {
          case /* SymbolC */1 :
              var tl = match.tl;
              var x$1 = x._0;
              if (tl) {
                return {
                        hd: /* Name */{
                          _0: x$1
                        },
                        tl: lambdaHelp({
                              TAG: /* ListC */2,
                              _0: tl
                            })
                      };
              } else {
                return {
                        hd: /* Name */{
                          _0: x$1
                        },
                        tl: /* [] */0
                      };
              }
          case /* NumberC */0 :
          case /* ListC */2 :
              return Pervasives.failwith("invalid input lambdaHelp");
          
        }
    
  }
}

function letHelp(listC) {
  switch (listC.TAG | 0) {
    case /* NumberC */0 :
    case /* SymbolC */1 :
        return /* [] */0;
    case /* ListC */2 :
        return /* [] */0;
    
  }
}

function condHelp(lst) {
  if (!lst) {
    return /* [] */0;
  }
  var match = lst.hd;
  switch (match.TAG | 0) {
    case /* NumberC */0 :
    case /* SymbolC */1 :
        return Pervasives.failwith("cond expect two arguments, but found incorrect number of\n      expressions following cond");
    case /* ListC */2 :
        var match$1 = match._0;
        if (!match$1) {
          return Pervasives.failwith("cond expect two arguments, but found incorrect number of\n      expressions following cond");
        }
        var match$2 = match$1.tl;
        if (!match$2) {
          return Pervasives.failwith("cond expect two arguments, but found incorrect number of\n      expressions following cond");
        }
        if (match$2.tl) {
          return Pervasives.failwith("cond expect two arguments, but found incorrect number of\n      expressions following cond");
        }
        var tl = lst.tl;
        var resultExpr = match$2.hd;
        var condExpr = match$1.hd;
        if (tl) {
          return {
                  hd: {
                    conditionExpr: parseExpression(condExpr),
                    resultExpr: parseExpression(resultExpr)
                  },
                  tl: condHelp(tl)
                };
        } else {
          return {
                  hd: {
                    conditionExpr: parseExpression(condExpr),
                    resultExpr: parseExpression(resultExpr)
                  },
                  tl: /* [] */0
                };
        }
    
  }
}

function parseExpression(cpe) {
  switch (cpe.TAG | 0) {
    case /* NumberC */0 :
        return {
                TAG: /* NumE */0,
                _0: cpe._0
              };
    case /* SymbolC */1 :
        var x = cpe._0;
        switch (x) {
          case "empty" :
              return /* EmptyE */0;
          case "false" :
              return {
                      TAG: /* BoolE */1,
                      _0: false
                    };
          case "true" :
              return {
                      TAG: /* BoolE */1,
                      _0: true
                    };
          default:
            return {
                    TAG: /* NameE */2,
                    _0: /* Name */{
                      _0: x
                    }
                  };
        }
    case /* ListC */2 :
        var lst = cpe._0;
        if (!lst) {
          return Pervasives.failwith("misc invalid input");
        }
        var x$1 = lst.hd;
        switch (x$1.TAG | 0) {
          case /* SymbolC */1 :
              var x$2 = x$1._0;
              if (x$2 === "if") {
                var match = lst.tl;
                if (!match) {
                  return Pervasives.failwith("expected three arguments");
                }
                var match$1 = match.tl;
                if (!match$1) {
                  return Pervasives.failwith("expected three arguments");
                }
                var match$2 = match$1.tl;
                if (match$2 && !match$2.tl) {
                  return {
                          TAG: /* IfE */5,
                          _0: {
                            boolExpr: parseExpression(match.hd),
                            trueExpr: parseExpression(match$1.hd),
                            falseExpr: parseExpression(match$2.hd)
                          }
                        };
                } else {
                  return Pervasives.failwith("expected three arguments");
                }
              }
              var match$3 = lst.tl;
              if (match$3) {
                var match$4 = match$3.tl;
                var exp1 = match$3.hd;
                if (match$4) {
                  if (!match$4.tl) {
                    var exp2 = match$4.hd;
                    switch (x$2) {
                      case "and" :
                          return {
                                  TAG: /* AndE */3,
                                  _0: parseExpression(exp1),
                                  _1: parseExpression(exp2)
                                };
                      case "lambda" :
                          return {
                                  TAG: /* LambdaE */7,
                                  _0: {
                                    nameList: lambdaHelp(exp1),
                                    lambdaBody: parseExpression(exp2)
                                  }
                                };
                      case "let" :
                          return {
                                  TAG: /* LetE */8,
                                  _0: {
                                    letPairs: letHelp(exp1),
                                    letBody: parseExpression(exp2)
                                  }
                                };
                      case "or" :
                          return {
                                  TAG: /* OrE */4,
                                  _0: parseExpression(exp1),
                                  _1: parseExpression(exp2)
                                };
                      default:
                        return Pervasives.failwith("misc invalid input");
                    }
                  }
                  
                } else {
                  switch (x$2) {
                    case "and" :
                        return Pervasives.failwith("and: expected two arguments");
                    case "lambda" :
                        return Pervasives.failwith("lambda: expected two arguments");
                    case "let" :
                        return Pervasives.failwith("let: expected two arguments");
                    case "or" :
                        return Pervasives.failwith("or: expected two arguments");
                    default:
                      return Pervasives.failwith("misc invalid input");
                  }
                }
              }
              if (x$2 === "cond") {
                return {
                        TAG: /* CondE */6,
                        _0: condHelp(lst.tl)
                      };
              }
              var tl = lst.tl;
              if (tl) {
                return {
                        TAG: /* ApplicationE */9,
                        _0: {
                          hd: {
                            TAG: /* NameE */2,
                            _0: /* Name */{
                              _0: x$2
                            }
                          },
                          tl: {
                            hd: parseExpression({
                                  TAG: /* ListC */2,
                                  _0: tl
                                }),
                            tl: /* [] */0
                          }
                        }
                      };
              } else {
                return {
                        TAG: /* NameE */2,
                        _0: /* Name */{
                          _0: x$2
                        }
                      };
              }
              break;
          case /* NumberC */0 :
          case /* ListC */2 :
              return Pervasives.failwith("misc invalid input");
          
        }
        break;
    
  }
}

function parseDefinition(cpd) {
  switch (cpd.TAG | 0) {
    case /* NumberC */0 :
    case /* SymbolC */1 :
        return Pervasives.failwith("define expects variable name followed by expression: incorrect format");
    case /* ListC */2 :
        var match = cpd._0;
        if (!match) {
          return Pervasives.failwith("define expects variable name followed by expression: incorrect format");
        }
        var match$1 = match.hd;
        switch (match$1.TAG | 0) {
          case /* SymbolC */1 :
              if (match$1._0 !== "define") {
                return Pervasives.failwith("define expects variable name followed by expression: incorrect format");
              }
              var match$2 = match.tl;
              if (!match$2) {
                return Pervasives.failwith("define expects variable name followed by expression: incorrect format");
              }
              var x = match$2.hd;
              switch (x.TAG | 0) {
                case /* SymbolC */1 :
                    var match$3 = match$2.tl;
                    if (match$3 && !match$3.tl) {
                      return [
                              /* Name */{
                                _0: x._0
                              },
                              parseExpression(match$3.hd)
                            ];
                    } else {
                      return Pervasives.failwith("define expects variable name followed by expression: incorrect format");
                    }
                case /* NumberC */0 :
                case /* ListC */2 :
                    return Pervasives.failwith("define expects variable name followed by expression: incorrect format");
                
              }
          case /* NumberC */0 :
          case /* ListC */2 :
              return Pervasives.failwith("define expects variable name followed by expression: incorrect format");
          
        }
    
  }
}

function parsePiece(input) {
  switch (input.TAG | 0) {
    case /* NumberC */0 :
    case /* SymbolC */1 :
        return {
                TAG: /* Expression */1,
                _0: parseExpression(input)
              };
    case /* ListC */2 :
        var match = input._0;
        if (!match) {
          return {
                  TAG: /* Expression */1,
                  _0: parseExpression(input)
                };
        }
        var match$1 = match.hd;
        switch (match$1.TAG | 0) {
          case /* SymbolC */1 :
              if (match$1._0 === "define") {
                return {
                        TAG: /* Definition */0,
                        _0: parseDefinition(input)
                      };
              } else {
                return {
                        TAG: /* Expression */1,
                        _0: parseExpression(input)
                      };
              }
          case /* NumberC */0 :
          case /* ListC */2 :
              return {
                      TAG: /* Expression */1,
                      _0: parseExpression(input)
                    };
          
        }
    
  }
}

function parse(input) {
  return List.map(parsePiece, input);
}

var extendEnv = List.append;

function defLookUp(_env, nom) {
  while(true) {
    var env = _env;
    if (!env) {
      return ;
    }
    var match = env.hd;
    if (Caml_obj.caml_equal(match[0], nom)) {
      return match[1];
    }
    _env = env.tl;
    continue ;
  };
}

function $$eval(tle, local, _expr) {
  while(true) {
    var expr = _expr;
    var allEnv = List.append(local, tle);
    if (typeof expr === "number") {
      return {
              TAG: /* ListV */2,
              _0: /* [] */0
            };
    }
    switch (expr.TAG | 0) {
      case /* NumE */0 :
          return {
                  TAG: /* NumV */0,
                  _0: expr._0
                };
      case /* BoolE */1 :
          return {
                  TAG: /* BoolV */1,
                  _0: expr._0
                };
      case /* NameE */2 :
          var va = defLookUp(allEnv, expr._0);
          if (va !== undefined) {
            return va;
          } else {
            return Pervasives.failwith("name not bounded to value, cannot eval");
          }
      case /* AndE */3 :
          if (Caml_obj.caml_equal($$eval(tle, local, expr._0), {
                  TAG: /* BoolV */1,
                  _0: true
                }) && Caml_obj.caml_equal($$eval(tle, local, expr._1), {
                  TAG: /* BoolV */1,
                  _0: true
                })) {
            return {
                    TAG: /* BoolV */1,
                    _0: true
                  };
          } else {
            return {
                    TAG: /* BoolV */1,
                    _0: false
                  };
          }
      case /* OrE */4 :
          if (Caml_obj.caml_equal($$eval(tle, local, expr._0), {
                  TAG: /* BoolV */1,
                  _0: true
                }) || Caml_obj.caml_equal($$eval(tle, local, expr._1), {
                  TAG: /* BoolV */1,
                  _0: true
                })) {
            return {
                    TAG: /* BoolV */1,
                    _0: true
                  };
          } else {
            return {
                    TAG: /* BoolV */1,
                    _0: false
                  };
          }
      case /* IfE */5 :
          var ifData1 = expr._0;
          if (Caml_obj.caml_equal($$eval(tle, local, ifData1.boolExpr), {
                  TAG: /* BoolV */1,
                  _0: true
                })) {
            _expr = ifData1.trueExpr;
            continue ;
          }
          _expr = ifData1.falseExpr;
          continue ;
      case /* CondE */6 :
          var match = expr._0;
          if (!match) {
            return {
                    TAG: /* ListV */2,
                    _0: /* [] */0
                  };
          }
          var hd = match.hd;
          if (Caml_obj.caml_equal($$eval(tle, local, hd.conditionExpr), {
                  TAG: /* BoolV */1,
                  _0: true
                })) {
            _expr = hd.resultExpr;
            continue ;
          }
          _expr = {
            TAG: /* CondE */6,
            _0: match.tl
          };
          continue ;
      case /* LambdaE */7 :
          var lambdaData1 = expr._0;
          return {
                  TAG: /* ClosureV */4,
                  _0: {
                    cNameList: lambdaData1.nameList,
                    cExpr: lambdaData1.lambdaBody,
                    cEnv: local
                  }
                };
      case /* LetE */8 :
          return Pervasives.failwith("not yet implemented let");
      case /* ApplicationE */9 :
          return Pervasives.failwith("not yet implemented application");
      
    }
  };
}

function addDefinition(env, param) {
  var nom = param[0];
  var newBinding_1 = $$eval(env, env, param[1]);
  var newBinding = [
    nom,
    newBinding_1
  ];
  var match = defLookUp(env, nom);
  if (match !== undefined) {
    return Pervasives.failwith("name already bound to value");
  } else {
    return {
            hd: newBinding,
            tl: env
          };
  }
}

function stringOfValue(aValue) {
  switch (aValue.TAG | 0) {
    case /* NumV */0 :
        return String(aValue._0);
    case /* BoolV */1 :
        return Pervasives.string_of_bool(aValue._0);
    case /* ListV */2 :
        var match = aValue._0;
        if (match) {
          return "(cons " + (stringOfValue(match.hd) + (" " + (stringOfValue({
                            TAG: /* ListV */2,
                            _0: match.tl
                          }) + ")")));
        } else {
          return "empty";
        }
    case /* BuiltinV */3 :
        return aValue._0.printedRep;
    case /* ClosureV */4 :
        return Pervasives.failwith("implement later");
    
  }
}

function addBinding(env, bind) {
  return {
          hd: bind,
          tl: env
        };
}

function readName(def) {
  return def[0];
}

function $$process(pieces) {
  var processHelper = function (_tle, _pieces) {
    while(true) {
      var pieces = _pieces;
      var tle = _tle;
      if (!pieces) {
        return /* [] */0;
      }
      var d = pieces.hd;
      if (d.TAG !== /* Definition */0) {
        return {
                hd: $$eval(tle, /* [] */0, d._0),
                tl: processHelper(tle, pieces.tl)
              };
      }
      var d$1 = d._0;
      var match = defLookUp(tle, readName(d$1));
      if (match !== undefined) {
        return Pervasives.failwith("name already bind to value");
      }
      var newEnv = addDefinition(tle, d$1);
      _pieces = pieces.tl;
      _tle = newEnv;
      continue ;
    };
  };
  return processHelper(initialTle, pieces);
}

function rackette(program) {
  return List.map(stringOfValue, $$process(List.map(parsePiece, Read$Rackette.Reader.readAll(program))));
}

CS17SetupRackette$Rackette.checkExpectExpression(parseExpression({
          TAG: /* SymbolC */1,
          _0: "empty"
        }), /* EmptyE */0, "parse empty expression");

CS17SetupRackette$Rackette.checkExpectExpression(parseExpression(Read$Rackette.Reader.read("empty")), /* EmptyE */0, "read and parse empty expression");

CS17SetupRackette$Rackette.checkExpect(stringOfValue($$eval(initialTle, /* [] */0, parseExpression(Read$Rackette.Reader.read("empty")))), "empty", "read all the way for empty bruh");

exports.plus = plus;
exports.subtraction = subtraction;
exports.multiplication = multiplication;
exports.division = division;
exports.remi = remi;
exports.eq = eq;
exports.great = great;
exports.small = small;
exports.greq = greq;
exports.smeq = smeq;
exports.equality = equality;
exports.isNum = isNum;
exports.isZero = isZero;
exports.contain = contain;
exports.firstLst = firstLst;
exports.restLst = restLst;
exports.isEmpty = isEmpty;
exports.isCons = isCons;
exports.isNot = isNot;
exports.initialTle = initialTle;
exports.lambdaHelp = lambdaHelp;
exports.letHelp = letHelp;
exports.condHelp = condHelp;
exports.parseExpression = parseExpression;
exports.parseDefinition = parseDefinition;
exports.parsePiece = parsePiece;
exports.parse = parse;
exports.extendEnv = extendEnv;
exports.defLookUp = defLookUp;
exports.$$eval = $$eval;
exports.addDefinition = addDefinition;
exports.stringOfValue = stringOfValue;
exports.addBinding = addBinding;
exports.readName = readName;
exports.$$process = $$process;
exports.rackette = rackette;
/*  Not a pure module */
