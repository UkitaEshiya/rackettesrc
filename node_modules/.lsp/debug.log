Hello - from /Users/simonedunbar/.vscode/extensions/jaredly.reason-vscode-1.7.13/bin.native
Previous log location: /var/folders/gc/y9fbx5sn2_q3qv9n2q0vgyrr0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","languageId":"reason","version":1,"text":"type rawProgram = string;\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n/* a Rackette name \nName(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\ntype name =\n  | Name(string);\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n  \n/* a Rackette definition \n(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\ntype definition = (name, expression);\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":10,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 4, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Desktop/CS0170/Projects/Rackette/src/TypesPREDESIGNCHECK.re","languageId":"reason","version":1,"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Desktop/CS0170/Projects/Rackette/src/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
bs-platform could not be found
Sending response {"id": 5, "jsonrpc": "2.0", "error": {"code": -32603, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Desktop/CS0170/Projects/Rackette/src/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0119209289551ms
bs-platform could not be found
Sending response {"id": 6, "jsonrpc": "2.0", "error": {"code": -32603, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":6}}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Desktop/CS0170/Projects/Rackette/src/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
bs-platform could not be found
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Desktop/CS0170/Projects/Rackette/src/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
bs-platform could not be found
Sending response {"id": 8, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: bs-platform could not be found", "command": ""}}]}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Desktop/CS0170/Projects/Rackette/src/TypesPREDESIGNCHECK.re"},"position":{"line":13,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
bs-platform could not be found
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Desktop/CS0170/Projects/Rackette/src/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":0,"character":0},"end":{"line":140,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0131130218506ms
bs-platform could not be found
Sending response {"id": 10, "jsonrpc": "2.0", "error": {"code": -32603, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 11, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0240802764893ms
Sending response {"id": 12, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":70,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0300407409668ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":17,"character":2},"end":{"line":17,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0309944152832ms
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":0,"character":0},"end":{"line":103,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0221729278564ms
Sending response {"id": 15, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":2},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 16, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Desktop/CS0170/Projects/Rackette/src/TypesPREDESIGNCHECK.re"}}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":14,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0319480895996ms
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":14,"character":44}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0147819519043ms
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":14,"character":44},"end":{"line":14,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0660419464111ms
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":14,"character":44}}}
[server] Got a method textDocument/definition
[server] processing took 0.0181198120117ms
Sending response {"id": 21, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":2},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":2}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re","languageId":"reason","version":1,"text":"open Types;\n\n/* ======================== Printing helper procedures ====================== */\n\n/* ------------------------------- printGreen ---------------------------------\n * Input: s, a string to print\n * Output: nothing, but s will be printed with a green color\n */\nlet printGreen: string => unit =\n  s => print_endline(\"\\027[32m\" ++ s ++ \"\\027[0m\");\n\n/* -------------------------------- printRed ----------------------------------\n * Input: s, a string to print\n * Output: nothing, but s will be printed with a red color\n */\nlet printRed: string => unit =\n  s => print_endline(\"\\027[31m\" ++ s ++ \"\\027[0m\");\n\n/* ------------------------------ stringOfAList --------------------------------\n * Input: lst, a list of type 'a\n *        strOf, a procedure that turns type 'a to a string\n * Output: the string representation of lst\n */\nlet stringOfAList: (list('a), 'a => string) => string =\n  (lst, strOf) =>\n  \"[\" ++\n    List.fold_right(\n      (a, b) => strOf(a) ++ (if (b == \"]\") { \"\" } else { \", \" }) ++ b,\n      lst,\n      \"]\"\n    );\n\n/* ---------------------- stringOfConcreteProgramPiece -------------------------\n * Input: concrpiece, an concreteProgramPiece\n * Output: the string representation of concrpiece\n */\nlet rec stringOfConcreteProgramPiece: concreteProgramPiece => string =\n  concrpiece =>\n    switch (concrpiece) {\n    | NumberC(intx) => \"NumberC(\" ++ string_of_int(intx) ++ \")\"\n    | SymbolC(stringx) => \"SymbolC(\" ++ stringx ++ \")\"\n    | ListC(concreteProgramPieceList) =>\n      \"ListC(\"\n      ++ stringOfConcreteProgram(concreteProgramPieceList: concreteProgram)\n      ++ \")\"\n    }\n/* ------------------------ stringOfConcreteProgram ----------------------------\n * Input: concrprog, an concreteProgram\n * Output: the string representation of concrprog\n */\nand stringOfConcreteProgram: concreteProgram => string =\n  concrprog => stringOfAList(concrprog, stringOfConcreteProgramPiece);\n\n/* ------------------------------ stringOfName ---------------------------------\n * Input: namex, a name\n * Output: the string representation of namex\n */\nlet stringOfName: name => string =\n  namex =>\n    switch (namex) {\n    | Name(stringx) => \"Name(\" ++ stringx ++ \")\"\n    };\n\n/* ---------------------------- stringOfNameList -------------------------------\n * Input: nameList, a list of names\n * Output: the string representation of nameList\n */\nlet stringOfNameList: list(name) => string =\n  nameList => stringOfAList(nameList, stringOfName);\n\n/* --------------------------- stringOfExpression ------------------------------\n * Input: expr, an expression\n * Output: the string representation of expr\n */\nlet rec stringOfExpression: expression => string =\n  expr =>\n    switch (expr) {\n    | NumE(intx) => \"NumE(\" ++ string_of_int(intx) ++ \")\"\n    | BoolE(boolx) => \"BoolE(\" ++ string_of_bool(boolx) ++ \")\"\n    | EmptyE => \"EmptyE\"\n    | NameE(namex) => \"NameE(\" ++ stringOfName(namex) ++ \")\"\n    | AndE(expr1, expr2) =>\n      \"AndE(\"\n      ++ stringOfExpression(expr1)\n      ++ \", \"\n      ++ stringOfExpression(expr2)\n      ++ \")\"\n    | OrE(expr1, expr2) =>\n      \"OrE(\"\n      ++ stringOfExpression(expr1)\n      ++ \", \"\n      ++ stringOfExpression(expr2)\n      ++ \")\"\n    | CondE((exprpairlist: list(condData))) =>\n      let stringOfCondRecord: condData => string = (\n        condD =>\n          \"{\"\n          ++ \"conditionExpr: \"\n          ++ stringOfExpression(condD.conditionExpr)\n          ++ \", \"\n          ++ \"resultExpr: \"\n          ++ stringOfExpression(condD.resultExpr)\n          ++ \",\"\n          ++ \"}\"\n      );\n      \"CondE(\" ++ stringOfAList(exprpairlist, stringOfCondRecord) ++ \")\";\n    | LambdaE(lambdaD) =>\n      \"LambdaE({\"\n      ++ \"nameList: \"\n      ++ stringOfNameList(lambdaD.nameList)\n      ++ \", \"\n      ++ \"lambdaBody: \"\n      ++ stringOfExpression(lambdaD.lambdaBody)\n      ++ \",\"\n      ++ \"})\"\n    | LetE(letD) =>\n      let stringOfLetExpressionPair: letPair => string = (\n        pair =>\n          \"{\"\n          ++ \"pairName: \"\n          ++ stringOfName(pair.pairName)\n          ++ \", \"\n          ++ \"pairExpr: \"\n          ++ stringOfExpression(pair.pairExpr)\n          ++ \"}\"\n      );\n      \"LetE({\"\n      ++ stringOfAList(letD.letPairs, stringOfLetExpressionPair)\n      ++ \", \"\n      ++ \"letBody: \"\n      ++ stringOfExpression(letD.letBody)\n      ++ \",\"\n      ++ \"})\";\n    | ApplicationE(expressionlist) =>\n      \"ApplicationE({\"\n      ++ stringOfAList(expressionlist, stringOfExpression)\n      ++ \"})\"\n    };\n\n/* --------------------------- stringOfDefinition ------------------------------\n * Input: def, a definition\n * Output: the string representation of def\n */\nlet stringOfDefinition: definition => string =\n  def => {\n    let (name1, expr1) = def;\n    \"(\" ++ stringOfName(name1) ++ \", \" ++ stringOfExpression(expr1) ++ \")\";\n  };\n\n/* ---------------------- stringOfAbstractProgramPiece -------------------------\n * Input: piece, an abstractProgramPiece\n * Output: the string representation of piece\n */\nlet stringOfAbstractProgramPiece: abstractProgramPiece => string =\n  piece =>\n    switch (piece) {\n    | Expression(expr) => \"Expression(\" ++ stringOfExpression(expr) ++ \")\"\n    | Definition(def) => \"Definition(\" ++ stringOfDefinition(def) ++ \")\"\n    };\n\n/* ------------------------ stringOfAbstractProgram ----------------------------\n * Input: abstr, an abstractProgram\n * Output: the string representation of abstr\n */\nlet stringOfAbstractProgram: abstractProgram => string =\n  abstr => stringOfAList(abstr, stringOfAbstractProgramPiece);\n\n\n/* =========================== Testing procedures ========================== */\n\n/* ------------------------------- checkExpect --------------------------------\n * Inputs: actual, given value to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * NOTE: You can use this procedure on any type, but it will only print nice on\n *       failure if it's an atomic data type like string, int, float, bool.\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpect: ('a, 'a, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ce_Success: \" ++ message);\n    } else {\n      printRed(\"ce_Fail: \" ++ message);\n      printRed(\"expected output: \");\n      Js.log(expected);\n      printRed(\"actual output: \");\n      Js.log(actual);\n    };\n\n/* --------------------- checkExpectConcreteProgramPiece -----------------------\n * Inputs: actual, given concreteProgramPiece to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectConcreteProgramPiece:\n  (concreteProgramPiece, concreteProgramPiece, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfConcreteProgramPiece(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfConcreteProgramPiece(actual));\n    };\n\n/* ----------------------- checkExpectConcreteProgram --------------------------\n * Inputs: actual, given concreteProgram to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectConcreteProgram:\n  (concreteProgram, concreteProgram, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfConcreteProgram(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfConcreteProgram(actual));\n    };\n\n/* ----------------------------- checkExpectName -------------------------------\n * Inputs: actual, given name to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectName: (name, name, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfName(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfName(actual));\n    };\n\n/* ----------------------- checkExpectExpression --------------------------\n * Inputs: actual, given expression to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectExpression: (expression, expression, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfExpression(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfExpression(actual));\n    };\n\n/* -------------------------- checkExpectDefinition ----------------------------\n * Inputs: actual, given definition to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectDefinition: (definition, definition, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfDefinition(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfDefinition(actual));\n    };\n\n/* --------------------- checkExpectAbstractProgramPiece -----------------------\n * Inputs: actual, given abstractProgramPiece to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectAbstractProgramPiece:\n  (abstractProgramPiece, abstractProgramPiece, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfAbstractProgramPiece(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfAbstractProgramPiece(actual));\n    };\n\n/* ----------------------- checkExpectAbstractProgram --------------------------\n * Inputs: actual, given abstractProgram to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectAbstractProgram:\n  (abstractProgram, abstractProgram, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfAbstractProgram(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfAbstractProgram(actual));\n    };\n\n/* ------------------------------- checkWithin --------------------------------\n * Input: actual, given float value to be checked against expected\n *        expected, the expected value of actual\n *        within, the margin of error\n * Output: nothing, but succeeds if input and expected are in within of each\n *                  other and fails otherwise\n */\nlet checkWithin: (float, float, float) => unit =\n  (actual, expected, within) =>\n    if (abs_float(actual -. expected) <= abs_float(within)) {\n      printGreen(\"cwSuccess \");\n    } else {\n      printRed(\"cwFail \");\n      printRed(\"expected output: \");\n      Js.log(expected);\n      printRed(\"actual output: \");\n      Js.log(actual);\n    };\n\n/* -------------------------------- checkError --------------------------------\n * Inputs: thunk, a zero-argument procedure that outputs the thing that\n *                will throw an error\n *         expect, a string of the expected error message (whatever text was\n *                 put into the failwith)\n * Output: nothing (procedure prints information), but succeeds if calling\n *         thunk throws an error with the message expect and fails otherwise\n */\nlet checkError: (unit => 'a, string) => unit =\n  (thunk, expect) =>\n    try (\n      {\n        ignore(thunk());\n        failwith(\"Error did not occur\");\n      }\n    ) {\n    | Failure(err) when err == expect => printGreen(\"checkErrorSuccess \")\n    | Failure(err) when err == \"Error did not occur\" =>\n      printRed(\"Error did not occur\")\n    | Failure(err) =>\n      printRed(\n        \"checkErrorFail. Expected error: \"\n        ++ expect\n        ++ \"; Actual error: \"\n        ++ err,\n      )\n    };"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 22, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 24, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"},"position":{"line":9,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0278949737549ms
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re","languageId":"reason","version":1,"text":"open Types;\n\nmodule type ReaderSig = {\n  let read: rawProgram => concreteProgramPiece;\n  let readAll: rawProgram => concreteProgram;\n};\n\nmodule Reader: ReaderSig = {\n  /* I/P: a string, s\n   * O/P: a list of characters corresponding to s */\n  let charListOfString: string => list(char) =\n    str => {\n      let rec helper = (str, len, k) =>\n        switch (k) {\n        | 0 => []\n        | i => [str.[len - i], ...helper(str, len, i - 1)]\n        };\n      helper(str, String.length(str), String.length(str));\n    };\n\n  /* I/P: a character, c\n   * O/P: Some ((int) c), or None, if c isn't a digit */\n  let getDigit = c => {\n    let s = Char.code(c) - Char.code('0');\n    if (0 <= s && s <= 9) {\n      Some(s);\n    } else {\n      None;\n    };\n  };\n\n  /* adds a digit, digit, to a number by making it the least sigficant digit */\n  let addDigit: (int, int) => int = (digit, number) => number * 10 + digit;\n\n  /* I/P: a char, c\n   * O/P: true, if the character is allowable as a Racket identifier\n   *      false, otherwise */\n  let isLegalIdentifierCharacter: char => bool =\n    ch =>\n      switch (ch) {\n      | ' '\n      | '`'\n      | '('\n      | ')'\n      | '['\n      | ']'\n      | '{'\n      | '}'\n      | '\\\\'\n      | '|'\n      | ';'\n      | '\\''\n      | '\"' => false\n      | _ => true\n      };\n\n  /* I/P: a char list, chars, and current, a quoted_syntax option\n   * O/P: the quoted syntax representation of a number or symbol */\n  let rec readAtom:\n    (list(char), option(concreteProgramPiece)) => concreteProgramPiece =\n    (chars, current) =>\n      switch (chars, current) {\n      | ([], None) => failwith(\"vacuous expression\")\n      | ([], Some(cur)) => cur\n      | (['-', '-', ...tl], None) => readAtom(tl, Some(SymbolC(\"--\")))\n      | (['-'], None) => SymbolC(\"-\")\n      | (['-'], Some(x)) =>\n        switch (x) {\n        | SymbolC(id) => SymbolC(id ++ \"-\")\n        | NumberC(n) => SymbolC(string_of_int(n) ++ \"-\")\n        | ListC(_) => failwith(\"EMF\")\n        }\n      | (['-', ...tl], None) =>\n        switch (readAtom(tl, None)) {\n        | NumberC(n) => NumberC(- n)\n        | SymbolC(s) => SymbolC(\"-\" ++ s)\n        | ListC(_) => failwith(\"EMF\")\n        }\n      | ([hd, ...tl], None) =>\n        switch (getDigit(hd)) {\n        | Some(d) => readAtom(tl, Some(NumberC(d)))\n        | None =>\n          if (isLegalIdentifierCharacter(hd)) {\n            readAtom(tl, Some(SymbolC(String.make(1, hd))));\n          } else {\n            failwith(\"invalid character identifier\");\n          }\n        }\n      | ([hd, ...tl], Some(NumberC(n))) =>\n        switch (getDigit(hd)) {\n        | None =>\n          readAtom(\n            tl,\n            Some(SymbolC(string_of_int(n) ++ String.make(1, hd))),\n          )\n        | Some(d) => readAtom(tl, Some(NumberC(addDigit(d, n))))\n        }\n      | ([hd, ...tl], Some(SymbolC(s))) =>\n        if (isLegalIdentifierCharacter(hd)) {\n          readAtom(tl, Some(SymbolC(s ++ String.make(1, hd))));\n        } else {\n          failwith(\"invalid character identifier\");\n        }\n      | (_, Some(ListC(_))) =>\n        failwith(\"readAtom only handles atomic expressions\")\n      };\n\n  /* a representation of S-expressions */\n  type expressionTree =\n    | Terminal(list(char))\n    | Expression(list(expressionTree));\n\n  /* trims whitespace from the beginning of a list of characters */\n  let trimWhitespace: list(char) => list(char) =\n    input => {\n      let rec trimLeadingWhitespace: list(char) => list(char) = (\n        fun\n        | [] => []\n        | [' ', ...tl]\n        | ['\\t', ...tl]\n        | ['\\n', ...tl] => trimLeadingWhitespace(tl)\n        | [hd, ...tl] => [hd, ...tl]:\n          list(char) => list(char)\n      );\n      List.rev(\n        trimLeadingWhitespace(List.rev(trimLeadingWhitespace(input))),\n      );\n    };\n\n  /* I/P: chars, a character list\n   * O/P: a token and its remainder */\n  let rec untilWhitespace: list(char) => (list(char), list(char)) =\n    chars =>\n      switch (chars) {\n      | [] => ([], [])\n      | [' ', ...tl]\n      | ['\\t', ...tl]\n      | ['\\n', ...tl] => ([], tl)\n      | [')', ..._]\n      | ['(', ..._] => ([], chars)\n      | [hd, ...tl] =>\n        let (chars, rest) = untilWhitespace(tl);\n        ([hd, ...chars], rest);\n      };\n\n  /* I/P: a list of characters, chars\n   * O/P: the expressionTree representation of chars,\n   *      followed by the remaining characters */\n  let rec treeOfExpression: list(char) => (expressionTree, list(char)) =\n    chars => {\n      let trimmedChars = trimWhitespace(chars);\n      switch (trimmedChars) {\n      | [] => (Terminal([]), [])\n      | ['(', ...tl] =>\n        let (tree_list, rest) = makeTreeList(tl);\n        (Expression(tree_list), rest);\n      | [_, ..._] =>\n        let (symbol, rest) = untilWhitespace(trimmedChars);\n        (Terminal(symbol), rest);\n      };\n    }\n  and makeTreeList: list(char) => (list(expressionTree), list(char)) =\n    chars => {\n      let trimmedChars = trimWhitespace(chars);\n      switch (trimmedChars) {\n      | [] => failwith(\"wrong number of parentheses\")\n      | [')', ...tl] => ([], tl)\n      | [_, ..._] =>\n        let (tree, rest) = treeOfExpression(chars);\n        let (rest_list, rest_rest) = makeTreeList(rest);\n        ([tree, ...rest_list], rest_rest);\n      };\n    };\n\n  /* I/P: expression, a list of characters\n   * O/P: the quoted_syntax representation of expression,\n   *      followed by the remaining characters */\n  let readHelper: list(char) => (concreteProgramPiece, list(char)) =\n    expression => {\n      let rec readTree = (tree: expressionTree): concreteProgramPiece =>\n        switch (tree) {\n        | Terminal(chars) => readAtom(chars, None)\n        | Expression(trees) => ListC(List.map(readTree, trees))\n        };\n      let (tree, rest) = treeOfExpression(expression);\n      (readTree(tree), rest);\n    };\n\n  /* I/P: program, a string\n   * O/P: a representation of program as a list of quoted_syntax,\n   * \t\tcorresponding to multiple calls to (read) in Racket */\n  let read: rawProgram => concreteProgramPiece =\n    input => {\n      let (quoted, _) = readHelper(charListOfString(input));\n      quoted;\n    };\n\n  /* I/P: program, a string\n   * O/P: a representation of program as a list of quoted_syntax,\n   * \t\tcorresponding to multiple calls to (read) in Racket */\n  let readAll: rawProgram => concreteProgram =\n    input => {\n      let rec readAllHelper: list(char) => concreteProgram =\n        lst =>\n          switch (lst) {\n          | [] => []\n          | [_, ..._] as chars =>\n            let (quoted, rest) = readHelper(chars);\n            [quoted, ...readAllHelper(rest)];\n          };\n      readAllHelper(charListOfString(input));\n    };\n};"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 28, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"position":{"line":17,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"position":{"line":64,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Sending response {"id": 30, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 31, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"range":{"start":{"line":49,"character":11},"end":{"line":49,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0121593475342ms
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"position":{"line":57,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0290870666504ms
Sending response {"id": 33, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"position":{"line":195,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0300407409668ms
Sending response {"id": 34, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 35, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0338554382324ms
Sending response {"id": 36, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 37, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"position":{"line":184,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 39, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"position":{"line":197,"character":27}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0348091125488ms
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0162124633789ms
Sending response {"id": 41, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"range":{"start":{"line":197,"character":27},"end":{"line":197,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":14,"character":44},"end":{"line":14,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 44, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0112056732178ms
Sending response {"id": 45, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re","languageId":"reason","version":1,"text":"open Types;\n\nmodule type ReaderSig = {\n  let read: rawProgram => concreteProgramPiece;\n  let readAll: rawProgram => concreteProgram;\n};\n\nmodule Reader: ReaderSig = {\n  /* I/P: a string, s\n   * O/P: a list of characters corresponding to s */\n  let charListOfString: string => list(char) =\n    str => {\n      let rec helper = (str, len, k) =>\n        switch (k) {\n        | 0 => []\n        | i => [str.[len - i], ...helper(str, len, i - 1)]\n        };\n      helper(str, String.length(str), String.length(str));\n    };\n\n  /* I/P: a character, c\n   * O/P: Some ((int) c), or None, if c isn't a digit */\n  let getDigit = c => {\n    let s = Char.code(c) - Char.code('0');\n    if (0 <= s && s <= 9) {\n      Some(s);\n    } else {\n      None;\n    };\n  };\n\n  /* adds a digit, digit, to a number by making it the least sigficant digit */\n  let addDigit: (int, int) => int = (digit, number) => number * 10 + digit;\n\n  /* I/P: a char, c\n   * O/P: true, if the character is allowable as a Racket identifier\n   *      false, otherwise */\n  let isLegalIdentifierCharacter: char => bool =\n    ch =>\n      switch (ch) {\n      | ' '\n      | '`'\n      | '('\n      | ')'\n      | '['\n      | ']'\n      | '{'\n      | '}'\n      | '\\\\'\n      | '|'\n      | ';'\n      | '\\''\n      | '\"' => false\n      | _ => true\n      };\n\n  /* I/P: a char list, chars, and current, a quoted_syntax option\n   * O/P: the quoted syntax representation of a number or symbol */\n  let rec readAtom:\n    (list(char), option(concreteProgramPiece)) => concreteProgramPiece =\n    (chars, current) =>\n      switch (chars, current) {\n      | ([], None) => failwith(\"vacuous expression\")\n      | ([], Some(cur)) => cur\n      | (['-', '-', ...tl], None) => readAtom(tl, Some(SymbolC(\"--\")))\n      | (['-'], None) => SymbolC(\"-\")\n      | (['-'], Some(x)) =>\n        switch (x) {\n        | SymbolC(id) => SymbolC(id ++ \"-\")\n        | NumberC(n) => SymbolC(string_of_int(n) ++ \"-\")\n        | ListC(_) => failwith(\"EMF\")\n        }\n      | (['-', ...tl], None) =>\n        switch (readAtom(tl, None)) {\n        | NumberC(n) => NumberC(- n)\n        | SymbolC(s) => SymbolC(\"-\" ++ s)\n        | ListC(_) => failwith(\"EMF\")\n        }\n      | ([hd, ...tl], None) =>\n        switch (getDigit(hd)) {\n        | Some(d) => readAtom(tl, Some(NumberC(d)))\n        | None =>\n          if (isLegalIdentifierCharacter(hd)) {\n            readAtom(tl, Some(SymbolC(String.make(1, hd))));\n          } else {\n            failwith(\"invalid character identifier\");\n          }\n        }\n      | ([hd, ...tl], Some(NumberC(n))) =>\n        switch (getDigit(hd)) {\n        | None =>\n          readAtom(\n            tl,\n            Some(SymbolC(string_of_int(n) ++ String.make(1, hd))),\n          )\n        | Some(d) => readAtom(tl, Some(NumberC(addDigit(d, n))))\n        }\n      | ([hd, ...tl], Some(SymbolC(s))) =>\n        if (isLegalIdentifierCharacter(hd)) {\n          readAtom(tl, Some(SymbolC(s ++ String.make(1, hd))));\n        } else {\n          failwith(\"invalid character identifier\");\n        }\n      | (_, Some(ListC(_))) =>\n        failwith(\"readAtom only handles atomic expressions\")\n      };\n\n  /* a representation of S-expressions */\n  type expressionTree =\n    | Terminal(list(char))\n    | Expression(list(expressionTree));\n\n  /* trims whitespace from the beginning of a list of characters */\n  let trimWhitespace: list(char) => list(char) =\n    input => {\n      let rec trimLeadingWhitespace: list(char) => list(char) = (\n        fun\n        | [] => []\n        | [' ', ...tl]\n        | ['\\t', ...tl]\n        | ['\\n', ...tl] => trimLeadingWhitespace(tl)\n        | [hd, ...tl] => [hd, ...tl]:\n          list(char) => list(char)\n      );\n      List.rev(\n        trimLeadingWhitespace(List.rev(trimLeadingWhitespace(input))),\n      );\n    };\n\n  /* I/P: chars, a character list\n   * O/P: a token and its remainder */\n  let rec untilWhitespace: list(char) => (list(char), list(char)) =\n    chars =>\n      switch (chars) {\n      | [] => ([], [])\n      | [' ', ...tl]\n      | ['\\t', ...tl]\n      | ['\\n', ...tl] => ([], tl)\n      | [')', ..._]\n      | ['(', ..._] => ([], chars)\n      | [hd, ...tl] =>\n        let (chars, rest) = untilWhitespace(tl);\n        ([hd, ...chars], rest);\n      };\n\n  /* I/P: a list of characters, chars\n   * O/P: the expressionTree representation of chars,\n   *      followed by the remaining characters */\n  let rec treeOfExpression: list(char) => (expressionTree, list(char)) =\n    chars => {\n      let trimmedChars = trimWhitespace(chars);\n      switch (trimmedChars) {\n      | [] => (Terminal([]), [])\n      | ['(', ...tl] =>\n        let (tree_list, rest) = makeTreeList(tl);\n        (Expression(tree_list), rest);\n      | [_, ..._] =>\n        let (symbol, rest) = untilWhitespace(trimmedChars);\n        (Terminal(symbol), rest);\n      };\n    }\n  and makeTreeList: list(char) => (list(expressionTree), list(char)) =\n    chars => {\n      let trimmedChars = trimWhitespace(chars);\n      switch (trimmedChars) {\n      | [] => failwith(\"wrong number of parentheses\")\n      | [')', ...tl] => ([], tl)\n      | [_, ..._] =>\n        let (tree, rest) = treeOfExpression(chars);\n        let (rest_list, rest_rest) = makeTreeList(rest);\n        ([tree, ...rest_list], rest_rest);\n      };\n    };\n\n  /* I/P: expression, a list of characters\n   * O/P: the quoted_syntax representation of expression,\n   *      followed by the remaining characters */\n  let readHelper: list(char) => (concreteProgramPiece, list(char)) =\n    expression => {\n      let rec readTree = (tree: expressionTree): concreteProgramPiece =>\n        switch (tree) {\n        | Terminal(chars) => readAtom(chars, None)\n        | Expression(trees) => ListC(List.map(readTree, trees))\n        };\n      let (tree, rest) = treeOfExpression(expression);\n      (readTree(tree), rest);\n    };\n\n  /* I/P: program, a string\n   * O/P: a representation of program as a list of quoted_syntax,\n   * \t\tcorresponding to multiple calls to (read) in Racket */\n  let read: rawProgram => concreteProgramPiece =\n    input => {\n      let (quoted, _) = readHelper(charListOfString(input));\n      quoted;\n    };\n\n  /* I/P: program, a string\n   * O/P: a representation of program as a list of quoted_syntax,\n   * \t\tcorresponding to multiple calls to (read) in Racket */\n  let readAll: rawProgram => concreteProgram =\n    input => {\n      let rec readAllHelper: list(char) => concreteProgram =\n        lst =>\n          switch (lst) {\n          | [] => []\n          | [_, ..._] as chars =>\n            let (quoted, rest) = readHelper(chars);\n            [quoted, ...readAllHelper(rest)];\n          };\n      readAllHelper(charListOfString(input));\n    };\n};"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00810623168945ms
Sending response {"id": 47, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 48, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"range":{"start":{"line":197,"character":27},"end":{"line":197,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"position":{"line":206,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"position":{"line":203,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0147819519043ms
Sending response {"id": 52, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"},"range":{"start":{"line":212,"character":2},"end":{"line":212,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0190734863281ms
Sending response {"id": 53, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 54, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 55, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Read.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re","languageId":"reason","version":1,"text":"open Types;\n\n/* ======================== Printing helper procedures ====================== */\n\n/* ------------------------------- printGreen ---------------------------------\n * Input: s, a string to print\n * Output: nothing, but s will be printed with a green color\n */\nlet printGreen: string => unit =\n  s => print_endline(\"\\027[32m\" ++ s ++ \"\\027[0m\");\n\n/* -------------------------------- printRed ----------------------------------\n * Input: s, a string to print\n * Output: nothing, but s will be printed with a red color\n */\nlet printRed: string => unit =\n  s => print_endline(\"\\027[31m\" ++ s ++ \"\\027[0m\");\n\n/* ------------------------------ stringOfAList --------------------------------\n * Input: lst, a list of type 'a\n *        strOf, a procedure that turns type 'a to a string\n * Output: the string representation of lst\n */\nlet stringOfAList: (list('a), 'a => string) => string =\n  (lst, strOf) =>\n  \"[\" ++\n    List.fold_right(\n      (a, b) => strOf(a) ++ (if (b == \"]\") { \"\" } else { \", \" }) ++ b,\n      lst,\n      \"]\"\n    );\n\n/* ---------------------- stringOfConcreteProgramPiece -------------------------\n * Input: concrpiece, an concreteProgramPiece\n * Output: the string representation of concrpiece\n */\nlet rec stringOfConcreteProgramPiece: concreteProgramPiece => string =\n  concrpiece =>\n    switch (concrpiece) {\n    | NumberC(intx) => \"NumberC(\" ++ string_of_int(intx) ++ \")\"\n    | SymbolC(stringx) => \"SymbolC(\" ++ stringx ++ \")\"\n    | ListC(concreteProgramPieceList) =>\n      \"ListC(\"\n      ++ stringOfConcreteProgram(concreteProgramPieceList: concreteProgram)\n      ++ \")\"\n    }\n/* ------------------------ stringOfConcreteProgram ----------------------------\n * Input: concrprog, an concreteProgram\n * Output: the string representation of concrprog\n */\nand stringOfConcreteProgram: concreteProgram => string =\n  concrprog => stringOfAList(concrprog, stringOfConcreteProgramPiece);\n\n/* ------------------------------ stringOfName ---------------------------------\n * Input: namex, a name\n * Output: the string representation of namex\n */\nlet stringOfName: name => string =\n  namex =>\n    switch (namex) {\n    | Name(stringx) => \"Name(\" ++ stringx ++ \")\"\n    };\n\n/* ---------------------------- stringOfNameList -------------------------------\n * Input: nameList, a list of names\n * Output: the string representation of nameList\n */\nlet stringOfNameList: list(name) => string =\n  nameList => stringOfAList(nameList, stringOfName);\n\n/* --------------------------- stringOfExpression ------------------------------\n * Input: expr, an expression\n * Output: the string representation of expr\n */\nlet rec stringOfExpression: expression => string =\n  expr =>\n    switch (expr) {\n    | NumE(intx) => \"NumE(\" ++ string_of_int(intx) ++ \")\"\n    | BoolE(boolx) => \"BoolE(\" ++ string_of_bool(boolx) ++ \")\"\n    | EmptyE => \"EmptyE\"\n    | NameE(namex) => \"NameE(\" ++ stringOfName(namex) ++ \")\"\n    | AndE(expr1, expr2) =>\n      \"AndE(\"\n      ++ stringOfExpression(expr1)\n      ++ \", \"\n      ++ stringOfExpression(expr2)\n      ++ \")\"\n    | OrE(expr1, expr2) =>\n      \"OrE(\"\n      ++ stringOfExpression(expr1)\n      ++ \", \"\n      ++ stringOfExpression(expr2)\n      ++ \")\"\n    | CondE((exprpairlist: list(condData))) =>\n      let stringOfCondRecord: condData => string = (\n        condD =>\n          \"{\"\n          ++ \"conditionExpr: \"\n          ++ stringOfExpression(condD.conditionExpr)\n          ++ \", \"\n          ++ \"resultExpr: \"\n          ++ stringOfExpression(condD.resultExpr)\n          ++ \",\"\n          ++ \"}\"\n      );\n      \"CondE(\" ++ stringOfAList(exprpairlist, stringOfCondRecord) ++ \")\";\n    | LambdaE(lambdaD) =>\n      \"LambdaE({\"\n      ++ \"nameList: \"\n      ++ stringOfNameList(lambdaD.nameList)\n      ++ \", \"\n      ++ \"lambdaBody: \"\n      ++ stringOfExpression(lambdaD.lambdaBody)\n      ++ \",\"\n      ++ \"})\"\n    | LetE(letD) =>\n      let stringOfLetExpressionPair: letPair => string = (\n        pair =>\n          \"{\"\n          ++ \"pairName: \"\n          ++ stringOfName(pair.pairName)\n          ++ \", \"\n          ++ \"pairExpr: \"\n          ++ stringOfExpression(pair.pairExpr)\n          ++ \"}\"\n      );\n      \"LetE({\"\n      ++ stringOfAList(letD.letPairs, stringOfLetExpressionPair)\n      ++ \", \"\n      ++ \"letBody: \"\n      ++ stringOfExpression(letD.letBody)\n      ++ \",\"\n      ++ \"})\";\n    | ApplicationE(expressionlist) =>\n      \"ApplicationE({\"\n      ++ stringOfAList(expressionlist, stringOfExpression)\n      ++ \"})\"\n    };\n\n/* --------------------------- stringOfDefinition ------------------------------\n * Input: def, a definition\n * Output: the string representation of def\n */\nlet stringOfDefinition: definition => string =\n  def => {\n    let (name1, expr1) = def;\n    \"(\" ++ stringOfName(name1) ++ \", \" ++ stringOfExpression(expr1) ++ \")\";\n  };\n\n/* ---------------------- stringOfAbstractProgramPiece -------------------------\n * Input: piece, an abstractProgramPiece\n * Output: the string representation of piece\n */\nlet stringOfAbstractProgramPiece: abstractProgramPiece => string =\n  piece =>\n    switch (piece) {\n    | Expression(expr) => \"Expression(\" ++ stringOfExpression(expr) ++ \")\"\n    | Definition(def) => \"Definition(\" ++ stringOfDefinition(def) ++ \")\"\n    };\n\n/* ------------------------ stringOfAbstractProgram ----------------------------\n * Input: abstr, an abstractProgram\n * Output: the string representation of abstr\n */\nlet stringOfAbstractProgram: abstractProgram => string =\n  abstr => stringOfAList(abstr, stringOfAbstractProgramPiece);\n\n\n/* =========================== Testing procedures ========================== */\n\n/* ------------------------------- checkExpect --------------------------------\n * Inputs: actual, given value to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * NOTE: You can use this procedure on any type, but it will only print nice on\n *       failure if it's an atomic data type like string, int, float, bool.\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpect: ('a, 'a, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ce_Success: \" ++ message);\n    } else {\n      printRed(\"ce_Fail: \" ++ message);\n      printRed(\"expected output: \");\n      Js.log(expected);\n      printRed(\"actual output: \");\n      Js.log(actual);\n    };\n\n/* --------------------- checkExpectConcreteProgramPiece -----------------------\n * Inputs: actual, given concreteProgramPiece to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectConcreteProgramPiece:\n  (concreteProgramPiece, concreteProgramPiece, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfConcreteProgramPiece(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfConcreteProgramPiece(actual));\n    };\n\n/* ----------------------- checkExpectConcreteProgram --------------------------\n * Inputs: actual, given concreteProgram to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectConcreteProgram:\n  (concreteProgram, concreteProgram, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfConcreteProgram(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfConcreteProgram(actual));\n    };\n\n/* ----------------------------- checkExpectName -------------------------------\n * Inputs: actual, given name to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectName: (name, name, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfName(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfName(actual));\n    };\n\n/* ----------------------- checkExpectExpression --------------------------\n * Inputs: actual, given expression to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectExpression: (expression, expression, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfExpression(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfExpression(actual));\n    };\n\n/* -------------------------- checkExpectDefinition ----------------------------\n * Inputs: actual, given definition to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectDefinition: (definition, definition, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfDefinition(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfDefinition(actual));\n    };\n\n/* --------------------- checkExpectAbstractProgramPiece -----------------------\n * Inputs: actual, given abstractProgramPiece to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectAbstractProgramPiece:\n  (abstractProgramPiece, abstractProgramPiece, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfAbstractProgramPiece(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfAbstractProgramPiece(actual));\n    };\n\n/* ----------------------- checkExpectAbstractProgram --------------------------\n * Inputs: actual, given abstractProgram to be checked against expected\n *         expected, the expected value of actual\n *         message, a string describing the test\n * Output: nothing (procedure prints information), but succeeds if actual and\n *         expected are the same and fails otherwise\n */\nlet checkExpectAbstractProgram:\n  (abstractProgram, abstractProgram, string) => unit =\n  (actual, expected, message) =>\n    if (actual == expected) {\n      printGreen(\"ceSuccess: \" ++ message);\n    } else {\n      printRed(\"ceFail: \" ++ message);\n      printRed(\"expected output: \");\n      printRed(stringOfAbstractProgram(expected));\n      printRed(\"actual output: \");\n      printRed(stringOfAbstractProgram(actual));\n    };\n\n/* ------------------------------- checkWithin --------------------------------\n * Input: actual, given float value to be checked against expected\n *        expected, the expected value of actual\n *        within, the margin of error\n * Output: nothing, but succeeds if input and expected are in within of each\n *                  other and fails otherwise\n */\nlet checkWithin: (float, float, float) => unit =\n  (actual, expected, within) =>\n    if (abs_float(actual -. expected) <= abs_float(within)) {\n      printGreen(\"cwSuccess \");\n    } else {\n      printRed(\"cwFail \");\n      printRed(\"expected output: \");\n      Js.log(expected);\n      printRed(\"actual output: \");\n      Js.log(actual);\n    };\n\n/* -------------------------------- checkError --------------------------------\n * Inputs: thunk, a zero-argument procedure that outputs the thing that\n *                will throw an error\n *         expect, a string of the expected error message (whatever text was\n *                 put into the failwith)\n * Output: nothing (procedure prints information), but succeeds if calling\n *         thunk throws an error with the message expect and fails otherwise\n */\nlet checkError: (unit => 'a, string) => unit =\n  (thunk, expect) =>\n    try (\n      {\n        ignore(thunk());\n        failwith(\"Error did not occur\");\n      }\n    ) {\n    | Failure(err) when err == expect => printGreen(\"checkErrorSuccess \")\n    | Failure(err) when err == \"Error did not occur\" =>\n      printRed(\"Error did not occur\")\n    | Failure(err) =>\n      printRed(\n        \"checkErrorFail. Expected error: \"\n        ++ expect\n        ++ \"; Actual error: \"\n        ++ err,\n      )\n    };"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0369548797607ms
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0190734863281ms
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 58, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"},"position":{"line":11,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"},"position":{"line":352,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0231266021729ms
Sending response {"id": 60, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0181198120117ms
Sending response {"id": 61, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"},"range":{"start":{"line":359,"character":24},"end":{"line":359,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0250339508057ms
Sending response {"id": 62, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"},"position":{"line":347,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"},"position":{"line":347,"character":39}}}
[server] Got a method textDocument/definition
[server] processing took 0.0200271606445ms
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"},"range":{"start":{"line":363,"character":33},"end":{"line":363,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0369548797607ms
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"},"range":{"start":{"line":2,"character":44},"end":{"line":2,"character":49}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"},"position":{"line":2,"character":70}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/CS17SetupRackettePREDESIGNCHECK.re"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re","languageId":"reason","version":1,"text":"open CS17SetupRackette;\nopen Read.Reader;\nopen Types;\n\n\n/* TODO: fill this with your initial top level environment,\n * consisting of built-in procedures like + or empty? */\n\nlet initialTle: environment => value =\nenv => BuiltinV(builtinData); \n\nlet plus: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x+y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet add = {\n  printedRep: \"<builtin-proc-+>\", \n  bProc: plus}; \n\n\nlet subtraction: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x-y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet sub = {\n  printedRep: \"<builtin-proc-->\", \n  bProc: subtraction}; \n\n\nlet multiplication: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x*y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet mul = {\n  printedRep: \"<builtin-proc-*>\", \n  bProc: multiplication}; \n\n\nlet division: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x/y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet div = {\n  printedRep: \"<builtin-proc-/>\", \n  bProc: division}; \n\n\nlet remi: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x mod y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet rem = {\n  printedRep: \"<builtin-proc-rem>\", \n  bProc: remi};\n\n\nlet eq: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x == y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet equa = {\n  printedRep: \"<builtin-proc-=>\", \n  bProc: eq}; \n\n\nlet great: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x > y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet greater = {\n  printedRep: \"<builtin-proc->>\", \n  bProc: great}; \n\n\nlet small: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x < y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet lesser = {\n  printedRep: \"<builtin-proc-<>\", \n  bProc: small}; \n\n\n\n/*\n+ , - , * , / , remainder , = , < , > , <= , >= , equal? , number? , zero? , \ncons , first , rest , empty? ,\ncons? , and not ,\n*/\n7\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parseExpression */\nlet rec parseExpression: concreteProgramPiece => expression =\n  input => failwith(\"parseExpression is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parseDefinition */\nlet parseDefinition: concreteProgramPiece => definition =\n  input => failwith(\"parseDefinition is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parsePiece */\nlet parsePiece: concreteProgramPiece => abstractProgramPiece =\n  input =>\n    switch (input) {\n    | ListC([SymbolC(\"define\"), ..._]) => failwith(\"definitions not yet parsed\")\n    | _ => failwith(\"expressions not yet parsed\")\n    };\n\n/* TODO: write the header comment parts required by the Design Recipe\n * for parse */\nlet parse: concreteProgram => abstractProgram =\n  input =>\n    /* this will parse all of the pieces of this program,\n     * giving us a list of pieces, our abstract syntax */\n    List.map(parsePiece, input);\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement eval */\nlet rec eval: (tolLevelEnvt, localEnvt, expression) => value =\n  (tle, env, expr) =>\n      switch (exp) {\n      | NumE(x) => NumV(x)\n      | BoolE(bool) => BoolV(bool)\n      | EmptyE => []\n      | NameE(name) \n      | AndE(expression, expression) \n      | OrE(expression, expression)\n      | IfE(ifData)\n      | CondE(list(condData)) \n      | LambdaE(lambdaData)\n      | LetE(letData)\n      | ApplicationE(list(exp))=>\n      }\n      List.append(exprHelper(exp))\n    /* NOTE: tle is top level environment and env is local environment */\n    failwith(\"eval is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet addDefinition: (environment, (name, expression)) => environment =\n(env, (nom, expr)) => [(nom, expr), ...env]; \n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement stringOfValue*/\nlet rec stringOfValue: value => string =\n  aValue => failwith(\"stringOfValue is not yet implemented\");\n\n\n/*\nProcedure to lookup a definition in the environment, check whether it is already\nbound to a value. Definition is name expression\n*/\nlet rec deflookup: (environment, name) => bool =\n  (env, nom) =>\n    switch (env) {\n    | [(key, va), ...tl] =>\n      if (key == nom) {\n        failwith (\"name already bind to value\");\n      } else {\n        lookup(tl, nom);\n      }\n    | _ => true \n    };\n\n/*procedure to add new binding to environment*/\nlet addBinding: (environment, binding) => environment =\n(env, bind) => [bind, ...env]; \n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet process: abstractProgram => list(value) =\n  pieces => {\n    let rec processHelper: (environment, abstractProgram) => list(value) =\n      (tle, pieces) =>\n        switch (pieces) {\n        | [] => []\n        | [(nom, expr), ...tl] => \n        /* if definition, check whether name is already bind to value by looking\n        up in environment; if already bind, return error saying name is already\n        bind to value; if not bind, bind name to expression. */\n        if (deflookup(tle, nom)) {\n          addBinding (tle, (nom, (eval (tle env expr))));\n        } else {\n          failwith (\"name already bind to value\");\n        }\n\n        \n        \n        | [expr, ...tl] => \n        /* if expression, evaluate expression to value.*/\n          [eval(tle, env, e), processHelper(tle, tl)]\n        }\n    processHelper(initialTle, pieces);\n  };\n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet rackette: rawProgram => list(string) =\n  program => List.map(stringOfValue, process(parse(readAll(program))));\n  \n/* TODO: Test Cases (we have included a few sample check-expects) */\n// sample test: parseExpression on concreteProgramPiece\ncheckExpectExpression(parseExpression(SymbolC(\"empty\")), EmptyE,\n  \"parse empty expression\");\n// sample test: parseExpression with read\ncheckExpectExpression(parseExpression(read(\"empty\")), EmptyE,\n  \"read and parse empty expression\");\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 68, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0112056732178ms
Sending response {"id": 69, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 70, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":194,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0660419464111ms
Sending response {"id": 71, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":194,"character":21}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0128746032715ms
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0970363616943ms
Sending response {"id": 73, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":194,"character":21},"end":{"line":194,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 74, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":192,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 75, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":192,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":192,"character":8},"end":{"line":192,"character":8}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0288486480713ms
Sending response {"id": 77, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":192,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":192,"character":8},"end":{"line":192,"character":52}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":192,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 80, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":192,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 81, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":196,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 83, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0340938568115ms
Sending response {"id": 84, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":198,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.133991241455ms
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 86, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":180,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0238418579102ms
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":173,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.0219345092773ms
Sending response {"id": 88, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":173,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0221729278564ms
Sending response {"id": 89, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":173,"character":34}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0150203704834ms
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":173,"character":34},"end":{"line":173,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Sending response {"id": 91, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re","version":2},"contentChanges":[{"text":"open CS17SetupRackette;\nopen Read.Reader;\nopen Types;\n\n\n/* TODO: fill this with your initial top level environment,\n * consisting of built-in procedures like + or empty? */\n\nlet initialTle: environment => value =\nenv => BuiltinV(builtinData); \n\nlet plus: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x+y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet add = {\n  printedRep: \"<builtin-proc-+>\", \n  bProc: plus}; \n\n\nlet subtraction: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x-y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet sub = {\n  printedRep: \"<builtin-proc-->\", \n  bProc: subtraction}; \n\n\nlet multiplication: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x*y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet mul = {\n  printedRep: \"<builtin-proc-*>\", \n  bProc: multiplication}; \n\n\nlet division: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x/y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet div = {\n  printedRep: \"<builtin-proc-/>\", \n  bProc: division}; \n\n\nlet remi: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x mod y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet rem = {\n  printedRep: \"<builtin-proc-rem>\", \n  bProc: remi};\n\n\nlet eq: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x == y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet equa = {\n  printedRep: \"<builtin-proc-=>\", \n  bProc: eq}; \n\n\nlet great: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x > y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet greater = {\n  printedRep: \"<builtin-proc->>\", \n  bProc: great}; \n\n\nlet small: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x < y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet lesser = {\n  printedRep: \"<builtin-proc-<>\", \n  bProc: small}; \n\n\n\n/*\n+ , - , * , / , remainder , = , < , > , <= , >= , equal? , number? , zero? , \ncons , first , rest , empty? ,\ncons? , and not ,\n*/\n7\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parseExpression */\nlet rec parseExpression: concreteProgramPiece => expression =\n  input => failwith(\"parseExpression is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parseDefinition */\nlet parseDefinition: concreteProgramPiece => definition =\n  input => failwith(\"parseDefinition is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parsePiece */\nlet parsePiece: concreteProgramPiece => abstractProgramPiece =\n  input =>\n    switch (input) {\n    | ListC([SymbolC(\"define\"), ..._]) => failwith(\"definitions not yet parsed\")\n    | _ => failwith(\"expressions not yet parsed\")\n    };\n\n/* TODO: write the header comment parts required by the Design Recipe\n * for parse */\nlet parse: concreteProgram => abstractProgram =\n  input =>\n    /* this will parse all of the pieces of this program,\n     * giving us a list of pieces, our abstract syntax */\n    List.map(parsePiece, input);\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement eval */\nlet rec eval: (tolLevelEnvt, localEnvt, expression) => value =\n  (tle, env, expr) =>\n      switch (exp) {\n      | NumE(x) => NumV(x)\n      | BoolE(bool) => BoolV(bool)\n      | EmptyE => []\n      | NameE(name) \n      | AndE(expression, expression) \n      | OrE(expression, expression)\n      | IfE(ifData)\n      | CondE(list(condData)) \n      | LambdaE(lambdaData)\n      | LetE(letData)\n      | ApplicationE(list(exp))=>\n      }\n      List.append(exprHelper(exp))\n    /* NOTE: tle is top level environment and env is local environment */\n    failwith(\"eval is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet addDefinition: (environment, (name, expression)) => environment =\n(env, (nom, expr)) => [(nom, expr), ...env]; \n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement stringOfValue*/\nlet rec stringOfValue: value => string =\n  aValue => failwith(\"stringOfValue is not yet implemented\");\n\n\n/*\nProcedure to lookup a definition in the environment, check whether it is already\nbound to a value. Definition is name expression\n*/\nlet rec deflookup: (environment, name) => bool =\n  (env, nom) =>\n    switch (env) {\n    | [(key, va), ...tl] =>\n      if (key == nom) {\n        failwith (\"name already bnd to value\");\n      } else {\n        lookup(tl, nom);\n      }\n    | _ => true \n    };\n\n/*procedure to add new binding to environment*/\nlet addBinding: (environment, binding) => environment =\n(env, bind) => [bind, ...env]; \n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet process: abstractProgram => list(value) =\n  pieces => {\n    let rec processHelper: (environment, abstractProgram) => list(value) =\n      (tle, pieces) =>\n        switch (pieces) {\n        | [] => []\n        | [(nom, expr), ...tl] => \n        /* if definition, check whether name is already bind to value by looking\n        up in environment; if already bind, return error saying name is already\n        bind to value; if not bind, bind name to expression. */\n        if (deflookup(tle, nom)) {\n          addBinding (tle, (nom, (eval (tle env expr))));\n        } else {\n          failwith (\"name already bind to value\");\n        }\n\n        \n        \n        | [expr, ...tl] => \n        /* if expression, evaluate expression to value.*/\n          [eval(tle, env, e), processHelper(tle, tl)]\n        }\n    processHelper(initialTle, pieces);\n  };\n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet rackette: rawProgram => list(string) =\n  program => List.map(stringOfValue, process(parse(readAll(program))));\n  \n/* TODO: Test Cases (we have included a few sample check-expects) */\n// sample test: parseExpression on concreteProgramPiece\ncheckExpectExpression(parseExpression(SymbolC(\"empty\")), EmptyE,\n  \"parse empty expression\");\n// sample test: parseExpression with read\ncheckExpectExpression(parseExpression(read(\"empty\")), EmptyE,\n  \"read and parse empty expression\");\n"}]}}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":173,"character":33},"end":{"line":173,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 93, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re","version":3},"contentChanges":[{"text":"open CS17SetupRackette;\nopen Read.Reader;\nopen Types;\n\n\n/* TODO: fill this with your initial top level environment,\n * consisting of built-in procedures like + or empty? */\n\nlet initialTle: environment => value =\nenv => BuiltinV(builtinData); \n\nlet plus: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x+y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet add = {\n  printedRep: \"<builtin-proc-+>\", \n  bProc: plus}; \n\n\nlet subtraction: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x-y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet sub = {\n  printedRep: \"<builtin-proc-->\", \n  bProc: subtraction}; \n\n\nlet multiplication: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x*y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet mul = {\n  printedRep: \"<builtin-proc-*>\", \n  bProc: multiplication}; \n\n\nlet division: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x/y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet div = {\n  printedRep: \"<builtin-proc-/>\", \n  bProc: division}; \n\n\nlet remi: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x mod y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet rem = {\n  printedRep: \"<builtin-proc-rem>\", \n  bProc: remi};\n\n\nlet eq: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x == y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet equa = {\n  printedRep: \"<builtin-proc-=>\", \n  bProc: eq}; \n\n\nlet great: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x > y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet greater = {\n  printedRep: \"<builtin-proc->>\", \n  bProc: great}; \n\n\nlet small: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x < y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet lesser = {\n  printedRep: \"<builtin-proc-<>\", \n  bProc: small}; \n\n\n\n/*\n+ , - , * , / , remainder , = , < , > , <= , >= , equal? , number? , zero? , \ncons , first , rest , empty? ,\ncons? , and not ,\n*/\n7\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parseExpression */\nlet rec parseExpression: concreteProgramPiece => expression =\n  input => failwith(\"parseExpression is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parseDefinition */\nlet parseDefinition: concreteProgramPiece => definition =\n  input => failwith(\"parseDefinition is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parsePiece */\nlet parsePiece: concreteProgramPiece => abstractProgramPiece =\n  input =>\n    switch (input) {\n    | ListC([SymbolC(\"define\"), ..._]) => failwith(\"definitions not yet parsed\")\n    | _ => failwith(\"expressions not yet parsed\")\n    };\n\n/* TODO: write the header comment parts required by the Design Recipe\n * for parse */\nlet parse: concreteProgram => abstractProgram =\n  input =>\n    /* this will parse all of the pieces of this program,\n     * giving us a list of pieces, our abstract syntax */\n    List.map(parsePiece, input);\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement eval */\nlet rec eval: (tolLevelEnvt, localEnvt, expression) => value =\n  (tle, env, expr) =>\n      switch (exp) {\n      | NumE(x) => NumV(x)\n      | BoolE(bool) => BoolV(bool)\n      | EmptyE => []\n      | NameE(name) \n      | AndE(expression, expression) \n      | OrE(expression, expression)\n      | IfE(ifData)\n      | CondE(list(condData)) \n      | LambdaE(lambdaData)\n      | LetE(letData)\n      | ApplicationE(list(exp))=>\n      }\n      List.append(exprHelper(exp))\n    /* NOTE: tle is top level environment and env is local environment */\n    failwith(\"eval is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet addDefinition: (environment, (name, expression)) => environment =\n(env, (nom, expr)) => [(nom, expr), ...env]; \n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement stringOfValue*/\nlet rec stringOfValue: value => string =\n  aValue => failwith(\"stringOfValue is not yet implemented\");\n\n\n/*\nProcedure to lookup a definition in the environment, check whether it is already\nbound to a value. Definition is name expression\n*/\nlet rec deflookup: (environment, name) => bool =\n  (env, nom) =>\n    switch (env) {\n    | [(key, va), ...tl] =>\n      if (key == nom) {\n        failwith (\"name already bond to value\");\n      } else {\n        lookup(tl, nom);\n      }\n    | _ => true \n    };\n\n/*procedure to add new binding to environment*/\nlet addBinding: (environment, binding) => environment =\n(env, bind) => [bind, ...env]; \n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet process: abstractProgram => list(value) =\n  pieces => {\n    let rec processHelper: (environment, abstractProgram) => list(value) =\n      (tle, pieces) =>\n        switch (pieces) {\n        | [] => []\n        | [(nom, expr), ...tl] => \n        /* if definition, check whether name is already bind to value by looking\n        up in environment; if already bind, return error saying name is already\n        bind to value; if not bind, bind name to expression. */\n        if (deflookup(tle, nom)) {\n          addBinding (tle, (nom, (eval (tle env expr))));\n        } else {\n          failwith (\"name already bind to value\");\n        }\n\n        \n        \n        | [expr, ...tl] => \n        /* if expression, evaluate expression to value.*/\n          [eval(tle, env, e), processHelper(tle, tl)]\n        }\n    processHelper(initialTle, pieces);\n  };\n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet rackette: rawProgram => list(string) =\n  program => List.map(stringOfValue, process(parse(readAll(program))));\n  \n/* TODO: Test Cases (we have included a few sample check-expects) */\n// sample test: parseExpression on concreteProgramPiece\ncheckExpectExpression(parseExpression(SymbolC(\"empty\")), EmptyE,\n  \"parse empty expression\");\n// sample test: parseExpression with read\ncheckExpectExpression(parseExpression(read(\"empty\")), EmptyE,\n  \"read and parse empty expression\");\n"}]}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":173,"character":34},"end":{"line":173,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 95, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re","version":5},"contentChanges":[{"text":"open CS17SetupRackette;\nopen Read.Reader;\nopen Types;\n\n\n/* TODO: fill this with your initial top level environment,\n * consisting of built-in procedures like + or empty? */\n\nlet initialTle: environment => value =\nenv => BuiltinV(builtinData); \n\nlet plus: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x+y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet add = {\n  printedRep: \"<builtin-proc-+>\", \n  bProc: plus}; \n\n\nlet subtraction: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x-y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet sub = {\n  printedRep: \"<builtin-proc-->\", \n  bProc: subtraction}; \n\n\nlet multiplication: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x*y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet mul = {\n  printedRep: \"<builtin-proc-*>\", \n  bProc: multiplication}; \n\n\nlet division: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x/y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet div = {\n  printedRep: \"<builtin-proc-/>\", \n  bProc: division}; \n\n\nlet remi: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x mod y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet rem = {\n  printedRep: \"<builtin-proc-rem>\", \n  bProc: remi};\n\n\nlet eq: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x == y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet equa = {\n  printedRep: \"<builtin-proc-=>\", \n  bProc: eq}; \n\n\nlet great: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x > y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet greater = {\n  printedRep: \"<builtin-proc->>\", \n  bProc: great}; \n\n\nlet small: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x < y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet lesser = {\n  printedRep: \"<builtin-proc-<>\", \n  bProc: small}; \n\n\n\n/*\n+ , - , * , / , remainder , = , < , > , <= , >= , equal? , number? , zero? , \ncons , first , rest , empty? ,\ncons? , and not ,\n*/\n7\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parseExpression */\nlet rec parseExpression: concreteProgramPiece => expression =\n  input => failwith(\"parseExpression is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parseDefinition */\nlet parseDefinition: concreteProgramPiece => definition =\n  input => failwith(\"parseDefinition is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parsePiece */\nlet parsePiece: concreteProgramPiece => abstractProgramPiece =\n  input =>\n    switch (input) {\n    | ListC([SymbolC(\"define\"), ..._]) => failwith(\"definitions not yet parsed\")\n    | _ => failwith(\"expressions not yet parsed\")\n    };\n\n/* TODO: write the header comment parts required by the Design Recipe\n * for parse */\nlet parse: concreteProgram => abstractProgram =\n  input =>\n    /* this will parse all of the pieces of this program,\n     * giving us a list of pieces, our abstract syntax */\n    List.map(parsePiece, input);\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement eval */\nlet rec eval: (tolLevelEnvt, localEnvt, expression) => value =\n  (tle, env, expr) =>\n      switch (exp) {\n      | NumE(x) => NumV(x)\n      | BoolE(bool) => BoolV(bool)\n      | EmptyE => []\n      | NameE(name) \n      | AndE(expression, expression) \n      | OrE(expression, expression)\n      | IfE(ifData)\n      | CondE(list(condData)) \n      | LambdaE(lambdaData)\n      | LetE(letData)\n      | ApplicationE(list(exp))=>\n      }\n      List.append(exprHelper(exp))\n    /* NOTE: tle is top level environment and env is local environment */\n    failwith(\"eval is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet addDefinition: (environment, (name, expression)) => environment =\n(env, (nom, expr)) => [(nom, expr), ...env]; \n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement stringOfValue*/\nlet rec stringOfValue: value => string =\n  aValue => failwith(\"stringOfValue is not yet implemented\");\n\n\n/*\nProcedure to lookup a definition in the environment, check whether it is already\nbound to a value. Definition is name expression\n*/\nlet rec deflookup: (environment, name) => bool =\n  (env, nom) =>\n    switch (env) {\n    | [(key, va), ...tl] =>\n      if (key == nom) {\n        failwith (\"name already bouynd to value\");\n      } else {\n        lookup(tl, nom);\n      }\n    | _ => true \n    };\n\n/*procedure to add new binding to environment*/\nlet addBinding: (environment, binding) => environment =\n(env, bind) => [bind, ...env]; \n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet process: abstractProgram => list(value) =\n  pieces => {\n    let rec processHelper: (environment, abstractProgram) => list(value) =\n      (tle, pieces) =>\n        switch (pieces) {\n        | [] => []\n        | [(nom, expr), ...tl] => \n        /* if definition, check whether name is already bind to value by looking\n        up in environment; if already bind, return error saying name is already\n        bind to value; if not bind, bind name to expression. */\n        if (deflookup(tle, nom)) {\n          addBinding (tle, (nom, (eval (tle env expr))));\n        } else {\n          failwith (\"name already bind to value\");\n        }\n\n        \n        \n        | [expr, ...tl] => \n        /* if expression, evaluate expression to value.*/\n          [eval(tle, env, e), processHelper(tle, tl)]\n        }\n    processHelper(initialTle, pieces);\n  };\n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet rackette: rawProgram => list(string) =\n  program => List.map(stringOfValue, process(parse(readAll(program))));\n  \n/* TODO: Test Cases (we have included a few sample check-expects) */\n// sample test: parseExpression on concreteProgramPiece\ncheckExpectExpression(parseExpression(SymbolC(\"empty\")), EmptyE,\n  \"parse empty expression\");\n// sample test: parseExpression with read\ncheckExpectExpression(parseExpression(read(\"empty\")), EmptyE,\n  \"read and parse empty expression\");\n"}]}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":173,"character":36},"end":{"line":173,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0238418579102ms
Sending response {"id": 96, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0231266021729ms
Sending response {"id": 97, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 98, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re","version":6},"contentChanges":[{"text":"open CS17SetupRackette;\nopen Read.Reader;\nopen Types;\n\n\n/* TODO: fill this with your initial top level environment,\n * consisting of built-in procedures like + or empty? */\n\nlet initialTle: environment => value =\nenv => BuiltinV(builtinData); \n\nlet plus: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x+y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet add = {\n  printedRep: \"<builtin-proc-+>\", \n  bProc: plus}; \n\n\nlet subtraction: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x-y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet sub = {\n  printedRep: \"<builtin-proc-->\", \n  bProc: subtraction}; \n\n\nlet multiplication: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x*y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet mul = {\n  printedRep: \"<builtin-proc-*>\", \n  bProc: multiplication}; \n\n\nlet division: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x/y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet div = {\n  printedRep: \"<builtin-proc-/>\", \n  bProc: division}; \n\n\nlet remi: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x mod y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet rem = {\n  printedRep: \"<builtin-proc-rem>\", \n  bProc: remi};\n\n\nlet eq: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x == y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet equa = {\n  printedRep: \"<builtin-proc-=>\", \n  bProc: eq}; \n\n\nlet great: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x > y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet greater = {\n  printedRep: \"<builtin-proc->>\", \n  bProc: great}; \n\n\nlet small: list(value) => int = numlst => \n  switch (numlst) {\n    |[NumV(x), NumV(y)] => x < y \n    |_ => failwith (\"invalid input\")\n  }; \n\nlet lesser = {\n  printedRep: \"<builtin-proc-<>\", \n  bProc: small}; \n\n\n\n/*\n+ , - , * , / , remainder , = , < , > , <= , >= , equal? , number? , zero? , \ncons , first , rest , empty? ,\ncons? , and not ,\n*/\n7\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parseExpression */\nlet rec parseExpression: concreteProgramPiece => expression =\n  input => failwith(\"parseExpression is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parseDefinition */\nlet parseDefinition: concreteProgramPiece => definition =\n  input => failwith(\"parseDefinition is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement parsePiece */\nlet parsePiece: concreteProgramPiece => abstractProgramPiece =\n  input =>\n    switch (input) {\n    | ListC([SymbolC(\"define\"), ..._]) => failwith(\"definitions not yet parsed\")\n    | _ => failwith(\"expressions not yet parsed\")\n    };\n\n/* TODO: write the header comment parts required by the Design Recipe\n * for parse */\nlet parse: concreteProgram => abstractProgram =\n  input =>\n    /* this will parse all of the pieces of this program,\n     * giving us a list of pieces, our abstract syntax */\n    List.map(parsePiece, input);\n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement eval */\nlet rec eval: (tolLevelEnvt, localEnvt, expression) => value =\n  (tle, env, expr) =>\n      switch (exp) {\n      | NumE(x) => NumV(x)\n      | BoolE(bool) => BoolV(bool)\n      | EmptyE => []\n      | NameE(name) \n      | AndE(expression, expression) \n      | OrE(expression, expression)\n      | IfE(ifData)\n      | CondE(list(condData)) \n      | LambdaE(lambdaData)\n      | LetE(letData)\n      | ApplicationE(list(exp))=>\n      }\n      List.append(exprHelper(exp))\n    /* NOTE: tle is top level environment and env is local environment */\n    failwith(\"eval is not yet implemented\");\n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet addDefinition: (environment, (name, expression)) => environment =\n(env, (nom, expr)) => [(nom, expr), ...env]; \n\n/* TODO: write the header comment parts required by the Design Recipe\n * and implement stringOfValue*/\nlet rec stringOfValue: value => string =\n  aValue => failwith(\"stringOfValue is not yet implemented\");\n\n\n/*\nProcedure to lookup a definition in the environment, check whether it is already\nbound to a value. Definition is name expression\n*/\nlet rec deflookup: (environment, name) => bool =\n  (env, nom) =>\n    switch (env) {\n    | [(key, va), ...tl] =>\n      if (key == nom) {\n        failwith (\"name already bound to value\");\n      } else {\n        lookup(tl, nom);\n      }\n    | _ => true \n    };\n\n/*procedure to add new binding to environment*/\nlet addBinding: (environment, binding) => environment =\n(env, bind) => [bind, ...env]; \n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet process: abstractProgram => list(value) =\n  pieces => {\n    let rec processHelper: (environment, abstractProgram) => list(value) =\n      (tle, pieces) =>\n        switch (pieces) {\n        | [] => []\n        | [(nom, expr), ...tl] => \n        /* if definition, check whether name is already bind to value by looking\n        up in environment; if already bind, return error saying name is already\n        bind to value; if not bind, bind name to expression. */\n        if (deflookup(tle, nom)) {\n          addBinding (tle, (nom, (eval (tle env expr))));\n        } else {\n          failwith (\"name already bind to value\");\n        }\n\n        \n        \n        | [expr, ...tl] => \n        /* if expression, evaluate expression to value.*/\n          [eval(tle, env, e), processHelper(tle, tl)]\n        }\n    processHelper(initialTle, pieces);\n  };\n\n/* TODO: write the header comment parts required by the Design Recipe */\nlet rackette: rawProgram => list(string) =\n  program => List.map(stringOfValue, process(parse(readAll(program))));\n  \n/* TODO: Test Cases (we have included a few sample check-expects) */\n// sample test: parseExpression on concreteProgramPiece\ncheckExpectExpression(parseExpression(SymbolC(\"empty\")), EmptyE,\n  \"parse empty expression\");\n// sample test: parseExpression with read\ncheckExpectExpression(parseExpression(read(\"empty\")), EmptyE,\n  \"read and parse empty expression\");\n"}]}}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":173,"character":35},"end":{"line":173,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 99, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 100, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0259876251221ms
Sending response {"id": 101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":177,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0479221343994ms
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":178,"character":6},"end":{"line":178,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0240802764893ms
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0190734863281ms
Sending response {"id": 104, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":175,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":196,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":198,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":199,"character":9},"end":{"line":199,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0250339508057ms
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":199,"character":9},"end":{"line":199,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 110, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":173,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 111, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":6,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":8,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":9,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":8,"character":6},"end":{"line":9,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 115, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":9,"character":6},"end":{"line":9,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 116, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":9,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 118, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":9,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0159740447998ms
Sending response {"id": 120, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":11,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":11,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Sending response {"id": 122, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":13,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.028133392334ms
Sending response {"id": 123, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 124, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0350475311279ms
Sending response {"id": 125, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":12,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 126, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":11,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0269412994385ms
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":13,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 128, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":19,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":19,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 130, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":19,"character":14},"end":{"line":19,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0259876251221ms
Sending response {"id": 131, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":18,"character":14},"end":{"line":19,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0231266021729ms
Sending response {"id": 132, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":18,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0400543212891ms
Sending response {"id": 133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 134, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0290870666504ms
Sending response {"id": 135, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 136, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":14,"character":44},"end":{"line":14,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 137, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":40,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":94,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0240802764893ms
Sending response {"id": 139, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0450611114502ms
Sending response {"id": 140, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":3},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n\n (let ((x 0) (y 18))  (let ((f (lambda (a b) (+ x b ))) (x  17)) (f y x)))"}]}}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":74},"end":{"line":140,"character":74}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0309944152832ms
Sending response {"id": 141, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0240802764893ms
Sending response {"id": 142, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0159740447998ms
Sending response {"id": 143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":136,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":137,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.028133392334ms
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0460147857666ms
Sending response {"id": 146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0269412994385ms
Sending response {"id": 147, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0300407409668ms
Sending response {"id": 148, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 150, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":22}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 151, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":22},"end":{"line":140,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":68}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 153, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0128746032715ms
Sending response {"id": 154, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":139,"character":0},"end":{"line":140,"character":74}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0531673431396ms
Sending response {"id": 155, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":0},"end":{"line":140,"character":74}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.032901763916ms
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":4},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n\n"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":5},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n"}]}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0231266021729ms
Sending response {"id": 157, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0159740447998ms
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":6},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */"}]}}
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":138,"character":4},"end":{"line":138,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0300407409668ms
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0209808349609ms
Sending response {"id": 160, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0169277191162ms
Sending response {"id": 162, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":129,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":8},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n\n  "}]}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 164, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0150203704834ms
Sending response {"id": 165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":9},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n\n   (let ((x 0) (y 18))  (let ((f (lambda (a b) (+ x b ))) (x  17)) (f y x)))"}]}}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":76},"end":{"line":140,"character":76}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0278949737549ms
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.032901763916ms
Sending response {"id": 167, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0269412994385ms
Sending response {"id": 168, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0259876251221ms
Sending response {"id": 169, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":138,"character":0},"end":{"line":140,"character":76}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0290870666504ms
Sending response {"id": 170, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":0},"end":{"line":140,"character":76}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 171, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":10},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n\n"}]}}
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 172, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0121593475342ms
Sending response {"id": 173, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":11},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n"}]}}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.018835067749ms
Sending response {"id": 174, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0197887420654ms
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":136,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 176, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 177, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 178, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":12},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\nThe top level environment is {+ -> <builtin-proc-+>} and the local environment is empty. Then, to evaluate (+ 3 5), Rackette will search for the binding of the name + in the local environment first, then the top level environment and find it is bound to a builtin procedure that evaluates to the sum of its two arguments. Raclette will evaluate the number expression 3 to get the value NumV(3) then evaluate the number expression 5 to get the value NumV(5). Lastly, Rackette will apply the built in procedure to NumV(3) and NumV(5) to get NumV(8), which is the value of (+ 3 5).\n"}]}}
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 179, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0300407409668ms
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":13},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n"}]}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0138282775879ms
Sending response {"id": 181, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0319480895996ms
Sending response {"id": 182, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0259876251221ms
Sending response {"id": 183, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":14},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n(let ((x 0) (y 18))  (let ((f (lambda (a b) (+ x b ))) (x  17)) (f y x)))"}]}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":139,"character":73},"end":{"line":139,"character":73}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0278949737549ms
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0228881835938ms
Sending response {"id": 185, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0278949737549ms
Sending response {"id": 186, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":139,"character":5},"end":{"line":139,"character":5}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0269412994385ms
Sending response {"id": 188, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0319480895996ms
Sending response {"id": 189, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":15},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n(let ((x 0) (y 18)) \n (let ((f (lambda (a b) (+ x b ))) (x  17)) (f y x)))"}]}}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 190, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.028133392334ms
Sending response {"id": 191, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0250339508057ms
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":6},"end":{"line":140,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0290870666504ms
Sending response {"id": 193, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.0219345092773ms
Sending response {"id": 194, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":44}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 195, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":44},"end":{"line":140,"character":44}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0820159912109ms
Sending response {"id": 196, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":16},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n(let ((x 0) (y 18)) \n (let ((f (lambda (a b) (+ x b ))) (x  17)) \n (f y x)))"}]}}
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":141,"character":1},"end":{"line":141,"character":1}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 197, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 198, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0271797180176ms
Sending response {"id": 199, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":17},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n(let ((x 0) (y 18)) \n (let ((f (lambda (a b) (+ x b ))) (x  17)) \n  (f y x)))"}]}}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":141,"character":2},"end":{"line":141,"character":2}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0381469726562ms
Sending response {"id": 200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 201, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0321865081787ms
Sending response {"id": 202, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":18},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n(let ((x 0) (y 18)) \n (let ((f (lambda (a b) (+ x b ))) (x  17)) \n    (f y x)))"}]}}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":141,"character":4},"end":{"line":141,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 203, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 204, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0171661376953ms
Sending response {"id": 205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":19},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n(let ((x 0) (y 18)) \n (let ((f (lambda (a b) (+ x b ))) (x  17)) \n      (f y x)))"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":24},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n(let ((x 0) (y 18)) \n (let ((f (lambda (a b) (+ x b ))) (x  17)) \n                (f y x)))"}]}}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":141,"character":16},"end":{"line":141,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 206, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 207, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0150203704834ms
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0698566436768ms
Sending response {"id": 209, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":31},"end":{"line":140,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.028133392334ms
Sending response {"id": 210, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 211, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0238418579102ms
Sending response {"id": 212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0290870666504ms
Sending response {"id": 213, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":6},"end":{"line":140,"character":6}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":6},"end":{"line":140,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0231266021729ms
Sending response {"id": 215, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":6},"end":{"line":141,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0429153442383ms
Sending response {"id": 216, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":6},"end":{"line":140,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Sending response {"id": 217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":141,"character":25},"end":{"line":141,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.014066696167ms
Sending response {"id": 218, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 219, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 220, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":141,"character":16},"end":{"line":141,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":17}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0209808349609ms
Sending response {"id": 222, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":17},"end":{"line":140,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Sending response {"id": 223, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 224, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":10},"end":{"line":140,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Sending response {"id": 226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 227, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":7},"end":{"line":140,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 229, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":10},"end":{"line":140,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0228881835938ms
Sending response {"id": 230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.018835067749ms
Sending response {"id": 231, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 232, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":7},"end":{"line":140,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0340938568115ms
Sending response {"id": 234, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":50,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.0331401824951ms
Sending response {"id": 235, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.032901763916ms
Sending response {"id": 236, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0178813934326ms
Sending response {"id": 237, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0231266021729ms
Sending response {"id": 238, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 239, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 240, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0298023223877ms
Sending response {"id": 241, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":33}}}
[server] Got a method textDocument/hover
[server] processing took 0.0240802764893ms
Sending response {"id": 242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.0290870666504ms
Sending response {"id": 243, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":35},"end":{"line":140,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 244, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0290870666504ms
Sending response {"id": 245, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.797986984253ms
Sending response {"id": 246, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":34}}}
[server] Got a method textDocument/hover
[server] processing took 0.112056732178ms
Sending response {"id": 248, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":34},"end":{"line":140,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0269412994385ms
Sending response {"id": 249, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.046968460083ms
Sending response {"id": 250, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0171661376953ms
Sending response {"id": 251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 252, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":10},"end":{"line":140,"character":31}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0219345092773ms
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":10},"end":{"line":140,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0197887420654ms
Sending response {"id": 254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0240802764893ms
Sending response {"id": 255, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":256,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":32},"end":{"line":140,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Sending response {"id": 256, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":257,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":33},"end":{"line":140,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 257, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":258,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":34},"end":{"line":140,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0228881835938ms
Sending response {"id": 258, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":259,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":35},"end":{"line":140,"character":35}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0278949737549ms
Sending response {"id": 259, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":260,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":36}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0109672546387ms
Sending response {"id": 260, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":261,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":36},"end":{"line":140,"character":36}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0178813934326ms
Sending response {"id": 261, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":262,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":140,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.02121925354ms
Sending response {"id": 262, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":263,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":42},"end":{"line":140,"character":42}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0507831573486ms
Sending response {"id": 263, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":264,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0271797180176ms
Sending response {"id": 264, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":265,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":139,"character":0},"end":{"line":141,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0360012054443ms
Sending response {"id": 265, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":25},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n((lambda (x y) ((lambda (y) (+ x y)) x)) 17 18)"}]}}
Read message 
{"jsonrpc":"2.0","id":266,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":139,"character":47},"end":{"line":139,"character":47}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0278949737549ms
Sending response {"id": 266, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":267,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0169277191162ms
Sending response {"id": 267, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":268,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0200271606445ms
Sending response {"id": 268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":269,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":28}}}
[server] Got a method textDocument/hover
[server] processing took 0.0519752502441ms
Sending response {"id": 269, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":270,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":42}}}
[server] Got a method textDocument/hover
[server] processing took 0.0309944152832ms
Sending response {"id": 270, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":271,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":41}}}
[server] Got a method textDocument/hover
[server] processing took 0.0290870666504ms
Sending response {"id": 271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":272,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":41}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.0159740447998ms
Sending response {"id": 272, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":273,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":139,"character":41},"end":{"line":139,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0290870666504ms
Sending response {"id": 273, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":26},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n((lambda (x y) ((lambda (y) (+ x y)) x)) \n17 18)"}]}}
Read message 
{"jsonrpc":"2.0","id":274,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":140,"character":0},"end":{"line":140,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":275,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0209808349609ms
Sending response {"id": 275, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":276,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.014066696167ms
Sending response {"id": 276, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":277,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0460147857666ms
Sending response {"id": 277, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":27},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n((lambda (x y) ((lambda (y) (+ x y)) x)) 17 18)"}]}}
Read message 
{"jsonrpc":"2.0","id":278,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":139,"character":41},"end":{"line":139,"character":41}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 278, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":279,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 279, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":280,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0259876251221ms
Sending response {"id": 280, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":281,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0221729278564ms
Sending response {"id": 281, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":282,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.028133392334ms
Sending response {"id": 282, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":283,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0269412994385ms
Sending response {"id": 283, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":284,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 284, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":285,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":139,"character":15},"end":{"line":139,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0331401824951ms
Sending response {"id": 285, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":286,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 286, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":287,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0998973846436ms
Sending response {"id": 287, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":288,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.0138282775879ms
Sending response {"id": 288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":289,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":139,"character":0},"end":{"line":139,"character":47}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.046968460083ms
Sending response {"id": 289, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":290,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":139,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 290, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":28},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */\n"}]}}
Read message 
{"jsonrpc":"2.0","id":291,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 291, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":292,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0269412994385ms
Sending response {"id": 292, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":29},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */"}]}}
Read message 
{"jsonrpc":"2.0","id":293,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":138,"character":4},"end":{"line":138,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0298023223877ms
Sending response {"id": 293, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":294,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0228881835938ms
Sending response {"id": 294, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":295,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0269412994385ms
Sending response {"id": 295, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":29},"contentChanges":[{"text":"type rawProgram = string;\n\n\ntype concreteProgramPiece =\n  | NumberC(int)\n  | SymbolC(string)\n  | ListC(list(concreteProgramPiece));\n\n/* \ndata examples:\nNumberC(int): NumberC(12),  NumberC(8),  NumberC(0),  NumberC(-2)\nSymbolC(string): SymbolC(\"+\"), SymbolC(\"-\"), SymbolC(\"/\") \nListC(list(concreteProgramPiece)):\nListC(list(NumberC(12), SymbolC(\"-\"), NumberC(9), SymbolC(\"+\")))\nListC(list(SymbolC(\"/\"), NumberC(11), NumberC(15)))\nListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378)))\n*/\n\ntype concreteProgram = list(concreteProgramPiece);\n/*\ndata examples:\nlist(ListC(list(SymbolC(\"*\"), NumberC(0), NumberC(9378))), NumberC(12), NumberC(8))\nlist(NumberC(12), SymbolC(\"+\"), SymbolC())\n*/\n\n// a Rackette name \n\ntype name =\n  | Name(string);\n\n/*Name(\"x\") \nName(\"sequence\")\nName(\"variablename\")\n*/\n\n/* a Rackette expression */\ntype expression =\n  | NumE(int)\n  | BoolE(bool)\n  | EmptyE\n  | NameE(name)\n  | AndE(expression, expression)\n  | OrE(expression, expression)\n  | IfE(ifData)\n  | CondE(list(condData)) \n  | LambdaE(lambdaData)\n  | LetE(letData)\n  | ApplicationE(list(expression))\n  and ifData = {\n    ifExpr: expression,\n    yesExpr: expression, \n    noExpr: expression,\n  }\n  and condData = { \n    conditionExpr: expression, \n    resultExpr: expression,\n  }\n  and lambdaData = {\n    nameList: list(name),\n    lambdaBody: expression,\n  }\n  and letPair = {\n    pairName: name, \n    pairExpr: expression,  \n  }\n  and letData = {\n    letPairs: list(letPair),\n    letBody: expression,\n  }\n\n/* data examples:\nNumE(890)\nBoolE(false)\nEmptyE\nNameE(Name(\"x\"))\nAndE(OrE(BoolE(true), BoolE(false)), BoolE(true))\nOrE(BoolE(false), BoolE(false))\nIfE({ApplicationE(list(NameE(Name(\"=\")), NumE(5), NameE(Name(\"x\"))), BoolE(true), BoolE(false))})CondE(list(condData)) \nLambdaE(list(Name(\"x\")), ApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7))))\nLetE({list(Name(\"x\"),NumE(78)),OrE(BoolE(false), BoolE(false))})\nApplicationE(list(NameE(Name(\"+\")), NameE(Name(\"x\")), NumE(7)))\n*/\n  \n// a Rackette definition \ntype definition = (name, expression);\n/*(Name(\"x\"), NumE(18))\n(Name(\"alod\"), EmptyE)\n(Name(\"application\"), ApplicationE(list(expression)))\n*/\n\n/* a piece of Rackette that can be processed:\n * either a definition or an expression */\ntype abstractProgramPiece =\n  | Definition(definition)\n  | Expression(expression);\n/* data examples:\nDefinition((Name(\"x\"), NumE(18)))\nDefinition((Name(\"alod\"), ApplicationE(list(NumE(2), NumE(4)))))\nExpression(NumE(7))\nExpression(BoolE(true))\n*/\n\n/* a representation of a Rackette program -\n * any number of pieces */\ntype abstractProgram = list(abstractProgramPiece);\n/* data examples:\nlist(Definition((Name(\"x\"), NumE(18))), Definition((Name(\"y\"), NumE(30)))))\nlist(Expression(BoolE(true)))\n*/\n\n/* a Rackette value: the result of evaluating a Rackette expression */\ntype value =\n  | NumV(int)\n  | BoolV(bool)\n  | ListV(list(value))\n  | BuiltinV(builtinData)\n  | ClosureV(closureData)  // user defined\n  and builtinData = { \n    printedRep: string,\n    bProc: list(value) => value,\n  }\n  and closureData = {\n    cNameList: list(name),\n    cExpr: expression, \n    cEnv: environment,\n  }\n  /* Environments and bindings aren't values\n     But we use \"and\" here so bindings have access to values\n     and closures have access to environments */\n  and environment = (list(binding))\n  and binding = (name, value);\n\n  /* data examples:\n  NumV(15)\n  BoolV(true)\n  ListV(list(NumV(9), NumV(78), NumV(80)))\n  BuiltinV({printedRep: \"builtin:+\", bProc: plus,})\n  ClosureV({list(Name(\"y\")), NumE(45),(list(Name(\"x\"), NumV(\"34\"))})\n  */"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re","version":29}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":296,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0369548797607ms
Sending response {"id": 296, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":297,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0438690185547ms
Sending response {"id": 297, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":298,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":102,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0288486480713ms
Sending response {"id": 298, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":299,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0269412994385ms
Sending response {"id": 299, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":300,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":51,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0319480895996ms
Sending response {"id": 300, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":301,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"position":{"line":21,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 301, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":302,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0219345092773ms
Sending response {"id": 302, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":303,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"},"range":{"start":{"line":15,"character":52},"end":{"line":15,"character":52}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0138282775879ms
Sending response {"id": 303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":304,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/TypesPREDESIGNCHECK.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0958442687988ms
Sending response {"id": 304, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":305,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":306,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 306, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":307,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":18,"character":14},"end":{"line":19,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 307, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":308,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":13,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 308, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":309,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":142,"character":31}}}
[server] Got a method textDocument/hover
[server] processing took 0.0228881835938ms
Sending response {"id": 309, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":310,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":143,"character":35}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":311,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":148,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 311, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":312,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0300407409668ms
Sending response {"id": 312, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":313,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":147,"character":21},"end":{"line":148,"character":33}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.018835067749ms
Sending response {"id": 313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":314,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":146,"character":27},"end":{"line":146,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0200271606445ms
Sending response {"id": 314, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":315,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":139,"character":34},"end":{"line":139,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0240802764893ms
Sending response {"id": 315, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":316,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 316, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":317,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":152,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Sending response {"id": 317, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":318,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 318, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":319,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":155,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":319}}
Read message 
{"jsonrpc":"2.0","id":320,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0348091125488ms
Sending response {"id": 320, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":321,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":134,"character":24},"end":{"line":134,"character":24}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0181198120117ms
Sending response {"id": 321, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":322,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":140,"character":2}}}
[server] Got a method textDocument/hover
[server] processing took 0.0300407409668ms
Sending response {"id": 322, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":323,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":125,"character":52}}}
[server] Got a method textDocument/hover
[server] processing took 0.0228881835938ms
Sending response {"id": 323, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":324,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0481605529785ms
Sending response {"id": 324, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":325,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":137,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0259876251221ms
Sending response {"id": 325, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":326,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0240802764893ms
Sending response {"id": 326, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":327,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":151,"character":46}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":328,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0162124633789ms
Sending response {"id": 328, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":329,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 329, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":330,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 330, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":331,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":146,"character":27},"end":{"line":146,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0360012054443ms
Sending response {"id": 331, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":332,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0228881835938ms
Sending response {"id": 332, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":333,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":160,"character":37}}}
[server] Got a method textDocument/hover
[server] processing took 0.0321865081787ms
Sending response {"id": 333, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":334,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0309944152832ms
Sending response {"id": 334, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":335,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":154,"character":29}}}
[server] Got a method textDocument/hover
[server] processing took 0.0300407409668ms
Sending response {"id": 335, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":336,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":196,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 336, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":337,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":195,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":338,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":195,"character":8}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00905990600586ms
Sending response {"id": 338, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":339,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":195,"character":8},"end":{"line":195,"character":8}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0150203704834ms
Sending response {"id": 339, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":340,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":195,"character":8},"end":{"line":200,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0319480895996ms
Sending response {"id": 340, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":341,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":204,"character":10},"end":{"line":204,"character":10}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0319480895996ms
Sending response {"id": 341, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":342,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":204,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0288486480713ms
Sending response {"id": 342, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":343,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":205,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0228881835938ms
Sending response {"id": 343, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":344,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":205,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0250339508057ms
Sending response {"id": 344, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":345,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":205,"character":9},"end":{"line":207,"character":38}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 345, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":346,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"range":{"start":{"line":205,"character":9},"end":{"line":205,"character":53}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0309944152832ms
Sending response {"id": 346, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":347,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":192,"character":57}}}
[server] Got a method textDocument/hover
[server] processing took 0.0147819519043ms
Sending response {"id": 347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":348,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0510215759277ms
Sending response {"id": 348, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":349,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":106,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0159740447998ms
Sending response {"id": 349, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":350,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0131130218506ms
Sending response {"id": 350, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":351,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":111,"character":41}}}
[server] Got a method textDocument/hover
[server] processing took 0.0300407409668ms
Sending response {"id": 351, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":352,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/simonedunbar/Documents/GitHub/rackettesrc/Rackette.re"},"position":{"line":129,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0150203704834ms
Sending response {"id": 352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
